// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
// 
//   http:// www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

[ Constructor(sequence < octet > initialValues),
  Constructor(unsigned long size),
  Constructor(ByteString initialString), ]
interface Buffer {
    readonly attribute unsigned long length;
    attribute ArrayBuffer buffer;
    unsigned long copy(Buffer target, optional unsigned long targetStart = 0,
                                      optional unsigned long sourceStart = 0,
                                      optional unsigned long sourceEnd);
    this fill((string or Buffer or long) value, optional long offset = 0,
                                                optional long end,
                                                optional string encoding = "utf8");
    octet readUInt8(optional unsigned long offset = 0);
    short readUInt16BE(optional unsigned long offset = 0);
    short readUInt16LE(optional unsigned long offset = 0);
    long readUInt32BE(optional unsigned long offset = 0);
    long readUInt32LE(optional unsigned long offset = 0);
    string to_string(optional string encoding = "utf8");
    long write(string value, optional long offset = 0,
                             optional long length = 0,
                             optional string encoding = "utf8");
    long writeUInt8(octet value, unsigned long offset);
    long writeUInt16BE(unsigned short value, unsigned long offset);
    long writeUInt16LE(unsigned short value, unsigned long offset);
    long writeUInt32BE(unsigned long value, unsigned long offset);
    long writeUInt32LE(unsigned long value, unsigned long offset);
};
