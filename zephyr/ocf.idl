// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
// 
//   http:// www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// require returns an OCFObject
// var ocf = require('ocf');

[ReturnFromRequire]
interface OCFObject {
    attribute OCFServer server;         // OCF server object
    attribute OCFClient client;         // OCF client object
    attribute Platform platform;        // OCF platform info
    attribute Device device;            // OCF device info
    void start();
};
dictionary Platform {
    string id;
    string osVersion;
    string model;
    string manufacturerName;
    string manufacturerURL;
    string manufacturerDate;
    string platformVersion;
    string firmwareVersion;
    string supportURL;
};
dictionary Device {
    string uuid;
    string name;
    string dataModels;
    string coreSpecVersion;
};
///////////////////////////////////////////
// OCF Server
///////////////////////////////////////////
[ExternalInterface=(EventEmitter)]
interface OCFServer: EventEmitter {
    Promise<OCFResource> register(ResourceInit init);
};
dictionary ResourceInit {
    string resourcePath;      // OCF resource path
    string[] resourceTypes;   // List of resource types
    string[] interfaces;      // List of interfaces for resource types
    boolean discoverable;     // Is resource discoverable
    boolean observable;       // Is resource observable
    boolean secure;           // Is resource security enabled
    boolean slow;             // Is resource a slow reader
    object properties;        // Dictionary of resource properties
};
dictionary Resource {
    string resourcePath;      // Path for this resource
    object properties;        // Application specific resource properties
};
interface Request {
    attribute OCFResource target;       // Target/destination resource
    attribute OCFResource source;       // Source/origin resource
    attribute object data;              // resource representation
    Promise<void> respond(object data);
};
///////////////////////////////////////////
// OCF Client
///////////////////////////////////////////
[ExternalInterface=(EventEmitter)]
interface OCFClient: EventEmitter {
    Promise<Resource> findResources(ClientOptions options, optional FoundListener listener);
    Promise<Resource> retrieve(string deviceId, object options);
    Promise<Resource> update(Resource resource);
    Promise<Platform> getPlatformInfo(string deviceId);
    Promise<Device> getDeviceInfo(string deviceId);
};
dictionary ClientOptions {
    string deviceId;
    string resourceType;
    string resourcePath;
};
callback FoundListener = void (ClientResource resource);
dictionary ClientResource {
    string deviceId;
    string resourceType;
    string resourcePath;
};
typedef long OCFResource; /* may be some other type/object */
