// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
// 
//   http:// www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// require returns a FS object
// var fs = require('fs');
[ReturnFromRequire, ExternalInterface=(Buffer)]
interface FS {
    FileDescriptor openSync(string path, FileMode mode);
    void closeSync(FileDescriptor fd);
    void unlinkSync(string path);
    void rmdirSync(string path);
    long writeSync(FileDescriptor fd, (string or Buffer) data, long offset,
                   long length, optional long position);
    long readSync(FileDescriptor fd, Buffer data, long offset,
                  long length, optional long position);
    void truncateSync(string path, long length);
    void mkdirSync(string path);
    sequence < string > readdirSync(string path);
    Stat statSync(string path);
    void writeFileSync(string file, (string or Buffer) data);
};

// file descriptors are inherently platform specific, so we leave this
// as a placeholder
dictionary FileDescriptor {
    //string name;
};
interface Stat {
    boolean isFile();
    boolean isDirectory();
};
enum FileMode { "r", "w", "a", "r+", "w+", "a+" };
