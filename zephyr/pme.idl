// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
// 
//   http:// www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// require returns a PME object
// var pme = require('pme');
[ReturnFromRequire]
interface PME {
    void begin();
    void forget();
    void configure(unsigned short context,
                   unsigned short classificationMode,
                   unsigned short distanceMode,
                   unsigned short minInfluence,
                   unsigned short maxInfluence);
    void learn(sequence < long > pattern, unsigned long category);
    unsigned long classify(sequence < long > pattern);
    Neuron readNeuron(unsigned long id);
    void writeVector(sequence < long > pattern);
    unsigned short getCommittedCount();
    unsigned short getGlobalContext();
    unsigned short getClassifierMode();
    void setClassifierMode(unsigned short mode);
    unsigned short getDistanceMode();
    void setDistanceMode(unsigned short mode);
    sequence < JSON > saveNeurons();
    void restoreNeurons(sequence < JSON > objects);


    attribute unsigned short RBF_MODE;       // RBF classification mode
    attribute unsigned short KNN_MODE;       // KNN classification mode
    attribute unsigned short L1_DISTANCE;    // L1 distance mode
    attribute unsigned short LSUP_DISTANCE;  // LSUP distance mode
    attribute unsigned long NO_MATCH;        // indicates a pattern could not
                                             // be classified
    attribute unsigned short MIN_CONTEXT;    // minimum context value
    attribute unsigned short MAX_CONTEXT;    // maximum context value
    attribute unsigned long MAX_VECTOR_SIZE; // Maximum pattern size (in bytes)
    attribute unsigned long FIRST_NEURON_ID; // ID of first neuron in network
    attribute unsigned long LAST_NEURON_ID;  // ID of last neuron in network
    attribute unsigned long MAX_NEURONS;     // Number of neurons in the network
};
dictionary Neuron {
    unsigned short category;
    unsigned short context;
    unsigned short AIF;
    unsigned short minIF;
};
