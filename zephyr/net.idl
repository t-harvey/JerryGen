// require returns a Net object
// var net = require('net');

[Return_from_require,ExternalCallback=(events,ListenerCallback)]
interface Net {
    // create a server object
    Server createServer(ListenerCallback onconnection);
    // Socket constructor, create a new Socket
    Socket Socket();
    long isIP(string x);
    boolean isIPv4(string x);
    boolean isIPv6(string x);
};

[ExternalCallback=(events,ListenerCallback),
 ExternalInterface=(buffer, Buffer)]
interface Socket: EventEmitter {
    // Socket methods
    void connect(NetObjectOptions options, ListenerCallback onconnect);
    void pause();
    void resume();
    void setTimeout(long timeout, ListenerCallback ontimeout);
    void write(Buffer buf, ListenerCallback writeDone);
    // Socket properties
    attribute long bufferSize;    // Size of read buffer
    attribute long bytesRead;     // Total bytes read for the socket
    attribute long bytesWritten;  // Total bytes written for the socket
    attribute string localAddress;  // Sockets local IP
    attribute long localPort;     // Sockets local port
    attribute string remoteAddress; // Remote IP address
    attribute string remoteFamily;  // Remote IP family
    attribute long remotePort;    // Remote port
};

[ExternalCallback=(events,ListenerCallback)]
interface Server: EventEmitter {
    // Server methods
    AddressInfo address();
    void close();
    void getConnections(ListenerCallback x);
    void listen(NetObjectOptions options, ListenerCallback onlistening);
    // Server properties
    attribute boolean listening;      // true if the server is listening
    attribute long maxConnections;  // maximum number of connections
};

dictionary AddressOptions {
    long port;          // Port the client should connect to (required)
    string host;          // Host the client should connect to
    string localAddress;  // Local address to bind to
    long localPort;     // local port to bind to
    long family;        // Version of IP stack, deafults to 4
};

dictionary AddressInfo {
    long port;    // Server port
    string family;  // IPv4 or IPv6
    string address; // IP address for the server
};

dictionary NetObjectOptions {
    long port; /* Port to bind to */
    long host; /* IP to bind to */
    long backlog; /* Max number of concurrent connections */
}; /* NetObjectOptions */
