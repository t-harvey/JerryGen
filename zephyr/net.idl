// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
// 
//   http:// www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// require returns a Net object
// var net = require('net');
[ReturnFromRequire,ExternalCallback=(ListenerCallback)]
interface Net {
    Server createServer(optional ListenerCallback onconnection);
    Socket Socket();
    long isIP(string input);
    boolean isIPv4(string input);
    boolean isIPv6(string input);
};

[ExternalInterface=(EventEmitter),ExternalInterface=(Buffer),ExternalCallback=(ListenerCallback)]
interface Socket: EventEmitter {
    // Socket methods
    void connect(object options, optional ListenerCallback onconnect);
    void pause();
    void resume();
    void setTimeout(long timeout, ListenerCallback ontimeout);
    void write(Buffer buf, optional ListenerCallback writeDone);
    // Socket properties
    attribute long bufferSize;    // Size of read buffer
    attribute long bytesRead;     // Total bytes read for the socket
    attribute long bytesWritten;  // Total bytes written for the socket
    attribute string localAddress;  // Sockets local IP
    attribute long localPort;     // Sockets local port
    attribute string remoteAddress; // Remote IP address
    attribute string remoteFamily;  // Remote IP family
    attribute long remotePort;    // Remote port
};
[ExternalInterface=(EventEmitter),ExternalCallback=(ListenerCallback)]
interface Server: EventEmitter {
    // Server methods
    AddressInfo address();
    void close();
    void getConnections(ListenerCallback onconnection);
    void listen(object options, optional ListenerCallback onlistening);
    // Server properties
    attribute boolean listening;      // true if the server is listening
    attribute long maxConnections;  // maximum number of connections
};
dictionary AddressOptions {
    long port;          // Port the client should connect to (required)
    string host;          // Host the client should connect to
    string localAddress;  // Local address to bind to
    long localPort;     // local port to bind to
    long family;        // Version of IP stack, deafults to 4
};
dictionary AddressInfo {
    long port;    // Server port
    string family;  // IPv4 or IPv6
    string address; // IP address for the server
};
