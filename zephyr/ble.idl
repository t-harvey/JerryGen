// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
// 
//   http:// www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// require returns a BLE object
// var ble = require('ble');
[ReturnFromRequire,ExternalInterface=(EventEmitter)]
interface BLE: EventEmitter {
    void disconnect(string address);
    void startAdvertising(string name, sequence < string > uuids, optional string url);
    void stopAdvertising();
    void setServices(sequence < PrimaryService > services);
    PrimaryService newPrimaryService(PrimaryServiceInit init);
    Characteristic newCharacteristic(CharacteristicInit init);
    DescriptorInit newDescriptor(DescriptorInit init);
};

dictionary PrimaryServiceInit {
    string uuid;
    sequence < Characteristic > characteristics;
};
dictionary PrimaryService {
    string uuid;
    sequence < Characteristic > characteristics;
};
dictionary CharacteristicInit {
    string uuid;
    sequence < string > properties;                // 'read', 'write', 'notify'
    sequence < DescriptorInit > descriptors;
    ReadCallback onReadRequest;         // optional
    WriteCallback onWriteRequest;       // optional
    SubscribeCallback onSubscribe;      // optional
    UnsubscribeCallback onUnsubscribe;  // optional
    NotifyCallback onNotify;            // optional
};
interface Characteristic {
    attribute ReadCallback onReadRequest;
    attribute WriteCallback onWriteRequest;
    attribute SubscribeCallback onSubscribe;
    attribute UnsubscribeCallback onUnsubscribe;
    attribute NotifyCallback onNotify;
    attribute CharacteristicResult response;
};
callback ReadCallback = void (unsigned long offset,
                              FulfillReadCallback fulfillReadCallback);
[ExternalInterface=(Buffer)]
callback WriteCallback = void (Buffer data, unsigned long offset,
                               boolean withoutResponse,
                               FulfillWriteCallback fulfillWriteCallback);
callback SubscribeCallback = void (unsigned long maxValueSize,
                                   FulfillSubscribeCallback fullfillSubscribeCallback);
callback FulfillReadCallback = void (CharacteristicResult result, Buffer data);
callback FulfillWriteCallback = void (CharacteristicResult result);
callback FulfillSubscribeCallback = void (Buffer data);
callback NotifyCallback = void (any... params);
callback UnsubscribeCallback = void (any... params);
enum CharacteristicResult { "RESULT_SUCCESS", "RESULT_INVALID_OFFSET",
                            "RESULT_INVALID_ATTRIBUTE_LENGTH", "RESULT_UNLIKELY_ERROR" };
dictionary DescriptorInit {
    string uuid;
    string value;
};
