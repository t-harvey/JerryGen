// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
// 
//   http:// www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

// require returns a BLE object
// var ble = require('ble');

[NoInterfaceObject, ReturnFromRequire]
interface BLE {
    void disconnect();
    void on(string eventType, EventCallback callback);
    void startAdvertising(string name, string[] uuids, string url);
    void stopAdvertising();
    void setServices();
    void updateRssi();
    PrimaryService PrimaryService(PrimaryServiceInit init);
    Characteristic Characteristic(CharacteristicInit init);
    Descriptor Descriptor(DescriptorInit init);
};

// TODO: the argument type should be "any"...
callback EventCallback = void (long x);  // callback arg depends on event

dictionary PrimaryServiceInit {
    string uuid;
    Characteristic[] characteristics;
};

interface PrimaryService {
    attribute string uuid;
    attribute Characteristic[] characteristics;
}; /* PrimaryService */

enum CharacteristicResult2 { "RESULT_SUCCESS", "RESULT_INVALID_OFFSET", "RESULT_INVALID_ATTRIBUTE_LENGTH", "RESULT_UNLIKELY_ERROR" } ;

/*unsigned long const_unsigned_long;*/

dictionary CharacteristicResult {
    unsigned long henry;
};

dictionary CharacteristicInit {
    string uuid;
    string[] properties;                // 'read', 'write', 'notify'
    Descriptor[] descriptors;
    ReadCallback onReadRequest;         // optional
    WriteCallback onWriteRequest;       // optional
    SubscribeCallback onSubscribe;      // optional
    UnsubscribeCallback onUnsubscribe;  // optional
    NotifyCallback onNotify;            // optional
};

callback NotifyCallback = void ();
callback UnsubscribeCallback = void ();
callback ReadCallback = void (unsigned long offset, FulfillReadCallback x);
[ExternalInterface=(buffer, Buffer)]
callback WriteCallback = void (Buffer data, unsigned long offset, boolean withoutResponse, FulfillWriteCallback x);
callback SubscribeCallback = void (unsigned long maxValueSize,
                                   FulfillSubscribeCallback x);
callback FulfillReadCallback = void (CharacteristicResult result, Buffer data);
callback FulfillWriteCallback = void (CharacteristicResult result);
callback FulfillSubscribeCallback = void (Buffer data);

dictionary DescriptorInit {
    string uuid;
    string value;
};

interface Descriptor {
    attribute long uid;
}; /* Descriptor */




[NoInterfaceObject]
interface Characteristic {
    attribute ReadCallback onReadRequest;
    attribute WriteCallback onWriteRequest;
    attribute SubscribeCallback onSubscribe;
    attribute UnsubscribeCallback onUnsubscribe;
    attribute NotifyCallback onNotify;
    attribute CharacteristicResult2 response;
};
