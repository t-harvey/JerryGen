{{^OBEYFORMATTING}}
{{! This one .mustache file is used to create both the .h and the .c
    *_Types files -- look for the "body" and "header" markers }}
/* AUTOMATICALLY GENERATED ON {{timestamp}} */
{{#header}}
{{#dictionaries}}
#ifndef {{{dictionaryName}}}_H_
#define {{{dictionaryName}}}_H_
{{/dictionaries}}
{{/header}}

/* these are included to simplify the generator. Remove if not needed.*/
/* #include <string> */
/* #include <vector> */
#include <stdio.h>
#include <string.h>
#include "jerryscript.h"

{{#header}}
{{#externalTypes}}
#include "{{{package}}}/{{{type}}}.h"
{{/externalTypes}}
{{#non_intrinsic_types}}
#include "{{{type_name}}}.h"
{{/non_intrinsic_types}}
{{/header}}
{{#body}}
#include "{{moduleName}}_Types.h"
#include "{{{utilities_filename}}}.h"
{{#dictionaries}}
#include "{{{dictionaryName}}}.h"
{{/dictionaries}}
{{/body}}

{{#header}}
{{#dictionaries}}
typedef struct {
	{{#members}}
    {{#C_and_Jerryscript_Types}}
    {{{C_Type}}}{{#callback}}_calling_context{{/callback}}{{#is_array_object}}{{#is_array}}*{{/is_array}}{{/is_array_object}}{{^is_array_object}}{{#is_array}}_Array{{/is_array}}{{/is_array_object}} {{{name}}};
    {{/C_and_Jerryscript_Types}}
	{{/members}}
} {{name}};
{{/dictionaries}}
{{/header}}

{{#dictionaries}}
{{! really, these functions should be named "get_..._struct" rather
    than "get_..._value" -- but b/c Jerryscript already has get_*_value
    for all of the builtin types, it's easier to follow that naming
    scheme for dictionaries and interfaces...}}
{{{name}}} jerry_get_{{{name}}}_value(jerry_value_t value){{#header}};{{/header}}
{{#body}}
{
    jerry_value_t object_value = jerry_value_to_object(value);
    {{{name}}} return_struct;

    {{#is_array_object}}
    return_struct.length = jerry_get_array_length(object_value);
    {{#C_and_Jerryscript_Types}}
    return_struct.items = ({{{C_Type}}} *)malloc(sizeof({{{C_Type}}})*return_struct.length);
    for(int i = 0; i < return_struct.length; i++)
        return_struct.items[i] = ({{{C_Type}}})jerry_get_{{{C_Type}}}_value(jerry_get_property_by_index(object_value, i));
    {{/C_and_Jerryscript_Types}}
    {{/is_array_object}}
    {{^is_array_object}}
    {{#members}}
    jerry_value_t {{{name}}}_prop_name = jerry_create_string((const jerry_char_t *) "{{{name}}}");
    jerry_value_t {{{name}}}_value = jerry_get_property(object_value, {{{name}}}_prop_name);
    {{#C_and_Jerryscript_Types}}
/*    return_struct.{{{name}}} = ({{{C_Type}}}{{#is_array}}{{#is_string}}*{{/is_string}}{{^is_string}}_Array{{/is_string}}{{/is_array}})jerry_get_{{#is_array}}{{{C_Type}}}{{/is_array}}{{^is_array}}{{{C_Type}}}{{/is_array}}{{#is_array}}_Array{{/is_array}}_value({{{name}}}_value);*/
    return_struct.{{{name}}} = ({{{C_Type}}}{{#is_array}}_Array{{/is_array}})jerry_get_{{#is_array}}{{{C_Type}}}{{/is_array}}{{^is_array}}{{{C_Type}}}{{/is_array}}{{#is_array}}_Array{{/is_array}}_value({{{name}}}_value);
    {{/C_and_Jerryscript_Types}}
    jerry_release_value({{{name}}}_prop_name);
    jerry_release_value({{{name}}}_value);

    {{/members}}
    {{/is_array_object}}

    jerry_release_value(object_value);

    return return_struct;
} /* jerry_get_{{{name}}}_value */

{{/body}}
jerry_value_t jerry_create_{{{name}}}({{{name}}} x){{#header}};{{/header}}
{{#body}}
{
    jerry_value_t new_jerry_value = jerry_create_object();

    {{#is_array_object}}
    {{#C_and_Jerryscript_Types}}
    for (int i = 0; i < x.length; i++)
    {
        jerry_value_t next = jerry_create_{{{Jerryscript_Type}}}({{#is_string}}(const jerry_char_t *){{/is_string}}(x.items[i]));
    	jerry_release_value(jerry_set_property_by_index(new_jerry_value, i, next));
    	jerry_release_value(next);
    }
    {{/C_and_Jerryscript_Types}}
    {{/is_array_object}}
    {{^is_array_object}}
    {{#members}}
    jerry_value_t {{{name}}}_prop_name = jerry_create_string ((const jerry_char_t *) "{{{name}}}");
    {{#C_and_Jerryscript_Types}}
    jerry_value_t {{{name}}}_value = jerry_create_{{^is_array}}{{{Jerryscript_Type}}}{{/is_array}}{{#is_array}}{{{C_Type}}}_Array{{/is_array}}(x.{{{name}}});
    {{/C_and_Jerryscript_Types}}
    jerry_release_value(jerry_set_property(new_jerry_value, {{{name}}}_prop_name, {{{name}}}_value));
    jerry_release_value({{{name}}}_value);
    jerry_release_value({{{name}}}_prop_name);

    {{/members}}
    {{/is_array_object}}

    return new_jerry_value;
    
} /* jerry_create_{{{name}}} */

{{/body}}
{{/dictionaries}}

{{#dictionaries}}
{{#body}}
static jerry_value_t
create_{{{name}}}_dictionary_handler(const jerry_value_t func_value,
                   const jerry_value_t this_val,
                   const jerry_value_t *args_p,
                   const jerry_length_t args_cnt)
{
    jerry_value_t new_{{{name}}} = jerry_create_object();
    jerry_value_t prototype = get_prototype((char *) "{{{name}}}");
    jerry_release_value(jerry_set_prototype(new_{{{name}}}, prototype));
    jerry_release_value(prototype);

    {{#members}}
    if ((((signed int)args_cnt)-1) >= {{{member_index}}})
    {
        jerry_value_t {{{name}}}_prop_name = jerry_create_string ((const jerry_char_t *) "{{{name}}}");
        jerry_release_value(jerry_set_property(new_{{{dictionaryName}}}, {{{name}}}_prop_name, args_p[{{{member_index}}}]));
        jerry_release_value({{{name}}}_prop_name);
    }

    {{/members}}
    return new_{{{name}}};
} /* create_{{{name}}}_dictionary_handler */
{{/body}}

void initialize_{{{dictionaryName}}}_(void){{#header}};{{/header}}
{{#body}}
{
    /* first, check to see if the prototype object exists for this
       dictionary; if so, just return */
    jerry_value_t prototype = get_prototype((char *)"{{{name}}}");
    if (!jerry_value_has_error_flag(prototype) &&
        !jerry_value_is_undefined(prototype))
    {
        jerry_release_value(prototype);
	return;
    }

    /* create the prototype object */
    jerry_value_t global_object = jerry_get_global_object();

    /* add all of the dictionary fields, and set them to undefined */
    jerry_value_t {{{name}}}_prototype_object = jerry_create_object();
    {{#members}}
    add_field_to_object({{{dictionaryName}}}_prototype_object,
                           "{{{name}}}", NULL);
    {{/members}}

    /* store the prototype in the global prototypes holder */
    register_prototype((char *)"{{{name}}}", {{{name}}}_prototype_object);
    jerry_release_value({{{name}}}_prototype_object);

    /* this sets up the ability to "new" the object */
    add_field_to_object(global_object, "{{{name}}}", &create_{{{name}}}_dictionary_handler);

    jerry_release_value(global_object);

    /* finally, make sure that all of the types upon which this type
       depends have been loaded; note that if there's a cycle,
       initializing all of the included data structures after we
       create this one should(?) keep us from running infinitely */
{{#externalTypes}}
    initialize_{{{type}}}_();
{{/externalTypes}}
{{#non_intrinsic_types}}
    initialize_{{{type_name}}}_();
{{/non_intrinsic_types}}

} /* initialize_{{{dictionaryName}}}_ */

{{/body}}
{{#debug_printing}}
{{! TODO: THIS DOES NOT HANDLE ARRAYS! }}
void debug_print_{{{dictionaryName}}} (char *variable_name,
     				      {{{dictionaryName}}} value,
				      unsigned int indentation){{#header}};{{/header}}
{{#body}}
{
   /* we can get into infinite recursion, with one structure printing
      a second, which prints the first, and so on -- a simple
      mechnism would be to return whenever the indentation (which
      tracks recursion depth) gets too big */
   if (indentation > DEBUG_RECURSION_DEPTH_TOO_BIG)
   {
       printf("%*s%s -- RECURSION HALTED\n", indentation, "", variable_name);
       return;
   }

   printf("%*s%s:\n", indentation, "", variable_name);

   {{#members}}
   {{#C_and_Jerryscript_Types}}
   debug_print_{{{C_Type}}}("{{{name}}}", value.{{{name}}}, indentation+DEBUG_INDENTATION_WIDTH);
   {{/C_and_Jerryscript_Types}}

   {{/members}}
} /* debug_print_{{{dictionaryName}}} */
{{/body}}
{{/debug_printing}}

{{/dictionaries}}
{{#header}}

{{#dictionaries}}
#endif /* {{{dictionaryName}}}_H_ */
{{/dictionaries}}
{{/header}}
{{/OBEYFORMATTING}}
