{{! Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
}}

{{! This one .mustache file is used to create both the .h and the .c
    *_Types files -- look for the "body" and "(private_)header"
    markers }}

{{! for-all }}{{#dictionaries}}

{{! if }} {{#print_generation_message}}
/* AUTOMATICALLY GENERATED ON {{timestamp}} */
{{! end-if }}{{/print_generation_message}}

{{! put out the standard protection for the two .h files}}
{{! if }}{{^body}}
    {{! if }}{{#private_header}}
    	#ifndef PRIVATE_{{{dictionaryName}}}_H_
	#define PRIVATE_{{{dictionaryName}}}_H_
    {{! end-if }}{{/private_header}}
    {{! else if }}{{#header}}
    	#ifndef {{{dictionaryName}}}_H_
	#define {{{dictionaryName}}}_H_
    {{! end-if }}{{/header}}
{{! end-if (not-)}}{{/body}}

#include "jerryscript.h"

{{! the header and private-header use includes that the body just inherits }}
{{! if }}{{^body}}

    {{! if }}{{#private_header}}
        #include "{{{utilities_filename}}}_private.h"
    {{! end-if }}{{/private_header}}
    {{! else if }}{{#header}}
     	#include "{{{utilities_filename}}}.h"
    {{! end-if}}{{/header}}

    {{! for-all}}{{#externalTypes}}
        {{! if }}{{#private_header}}
	    #include "{{{type}}}_private.h"
    	{{! end-if }}{{/private_header}}
        {{! else if }}{{#header}}
	    #include "{{{type}}}.h"
    	{{! end-if }}{{/header}}
    {{! end-for-all}}{{/externalTypes}}

    {{! for-all}}{{#non_intrinsic_types}}
        {{! if }}{{#private_header}}
	    #include "{{{type_name}}}_private.h"
    	{{! end-if }}{{/private_header}}
        {{! else if }}{{#header}}
	    #include "{{{type_name}}}.h"
    	{{! end-if }}{{/header}}
    {{! end-for-all}}{{/non_intrinsic_types}}

{{! end-if (not-)}}{{/body}}

{{! if }}{{#body}}
#include "{{{dictionaryName}}}_private.h"
{{! end-if}}{{/body}}
{{! else-if }}{{#private_header}}
#include "{{{dictionaryName}}}.h"
{{! end-if}}{{/private_header}}

{{! we need to define the type before any of the external includes,
    which might need to use this type }}
{{! if }}{{#header}}
typedef struct {
    {{! for-all }}{{#members}}
    	{{! looking-at-fields-in:}}{{#C_and_Jerryscript_Types}}
{{! we put a pointer type out for the "items" array in dictinary types
    that are actually arrays -- so, here, we have to check if it's
    an array type and then if it's the "items" array (denoted by the
    the "is_array" boolean in the C_and_Jerryscript_Types data
    structure) }}
	    {{! if }}{{#is_array_object}}
	        {{! if }}{{#is_array}}
		    {{{C_Type}}} *{{{memberName}}};
	    	{{! end-if}}{{/is_array}}

		{{! else}}{{^is_array}}
	            {{{C_Type}}} {{{memberName}}};
		{{! end-if (not-)}}{{/is_array}}
	    {{! end-if}}{{/is_array_object}}

	    {{! else }}{{^is_array_object}}
	             {{{C_Type}}} {{{memberName}}};
	    {{! end-if (not-)}}{{/is_array_object}}

        {{! done-with }}{{/C_and_Jerryscript_Types}}
    {{! end-for-all}}{{/members}}
} {{{dictionaryName}}};
{{! end-if}}{{/header}}

{{! declare/define the constructor for the definition -- this only
    shows up in the (non-private)header and the body }}
{{! if}}{{^private_header}}
    /* all WebIDL constructs have a constructor function, so that C code
       can build any of these constructs */
        {{! if }}{{#header}}
            {{{dictionaryName}}} {{{dictionaryName}}}_constructor(void);
	{{! end-if }}{{/header}}
	{{! else-if }}{{#body}}
       	    {{{dictionaryName}}} {{{dictionaryName}}}_constructor(void)
	    {
		{{{dictionaryName}}} new_{{{dictionaryName}}};
    		{{! if }}{{#is_array_object}}
    		    new_{{{dictionaryName}}}.length = 0;
    		    new_{{{dictionaryName}}}.items = NULL;
    		{{! end-if }}{{/is_array_object}}
    		{{! else }}{{^is_array_object}}
		    {{! for-all }}{{#members}}
	        	{{! looking-at-fields-in:}}{{#C_and_Jerryscript_Types}}
			    {{! if }}{{#is_string}}
			    	new_{{{dictionaryName}}}.{{{memberName}}} = "{{{default_value}}}";
			    {{! end-if}}{{/is_string}}
			    {{! else-if }}{{^is_string}}
			        new_{{{dictionaryName}}}.{{{memberName}}} = {{{default_value}}};
			    {{! end-else (not-)}}{{/is_string}}
    			{{! done-with }}{{/C_and_Jerryscript_Types}}
    		    {{! end-for-all}}{{/members}}
    		{{! end-else (not-)}}{{/is_array_object}}
    		return new_{{{dictionaryName}}};
	    } /* {{{dictionaryName}}}_constructor */
  	{{! end-else }}{{/body}}

    /* this variable is used in composite types to denote a field of type
       {{{dictionaryName}}} -- this should be considered a read-only value */
{{#header}}extern {{/header}}int {{{dictionaryName}}}_uid;
{{! end-if (not-)}}{{/private_header}}

{{! these are the functions that are private, so they only show up in
    the body and the private header }}
{{! if }}{{^header}}

{{! ******************************************************************* }}
{{! for dictionaries, the "arg" handling functionality didn't save us
    anything; we still need all of the original getters/setters; since we
    currently don't use this code, we'll skip fully indenting it }}
{{! if }}{{^original_arg_handling}}
    {{#is_array_object}}
    {{#private_header}}
    #define {{{Interpreter.interpreter}}}_arg_{{{dictionaryName}}}(x, z) \
            jerryx_arg_custom(x, \
                             (uintptr_t)&((uintptr_t []){(uintptr_t)JERRYX_ARG_COERCE, \
                                                         (uintptr_t)z}), \
                              {{{Interpreter.interpreter}}}_arg_to_{{{dictionaryName}}})
    {{/private_header}}
    {{{Interpreter.Type}}} {{{Interpreter.interpreter}}}_arg_to_{{{dictionaryName}}}(jerryx_arg_js_iterator_t *js_arg_iter_p, const jerryx_arg_t *c_arg_p){{#private_header}};{{/private_header}}
    {{#body}}
    {
    {{{Interpreter.Type}}} array_value = jerryx_arg_js_iterator_pop(js_arg_iter_p);
    if (!jerry_value_is_array(array_value))
	return jerry_create_error(JERRY_ERROR_TYPE,
                (const jerry_char_t *) "Expected array.");

    unsigned int array_length = jerry_get_array_length(array_value);
    {{{dictionaryName}}} *new_{{{dictionaryName}}} = malloc(sizeof({{{dictionaryName}}}));

    {{! We'll loop through the "members" even though we know there's exactly
	two, b/c it's easier to access the array-element type that way... }}
    {{#members}}
    {{#C_and_Jerryscript_Types}}
    {{^is_array}}
    new_{{{dictionaryName}}}->length = array_length;
    {{/is_array}}
    {{#is_array}}
    if (array_length > 0)
	new_{{{dictionaryName}}}->items = ({{{C_Type}}} *)malloc(array_length*sizeof({{{C_Type}}}));

    {{{Interpreter.Type}}} get_element_return_value;
    for (int i = 0; i < array_length; i++)
    {
        jerry_value_t input_mapping[1] = { jerry_get_property_by_index(array_value, i) };
        jerryx_arg_t output_mapping[1] = { {{{Interpreter.interpreter}}}_arg_{{{C_Type}}}(&(new_{{{dictionaryName}}}->items[i]), ((uintptr_t*)(c_arg_p->extra_info))[1]) };
	get_element_return_value = 
               jerryx_arg_transform_args(
                             input_mapping,
                             1,
                             output_mapping,
                             1);
        if (jerry_value_is_error(get_element_return_value))
        {
            /* TODO: free (ALL!) memory!!! */
            return get_element_return_value;
        }
    }
    {{/is_array}}
    {{/C_and_Jerryscript_Types}}
    {{/members}}

    /* fallthrough indicates that the array was read in correctly */
    *(({{{dictionaryName}}} *)(c_arg_p->dest)) = *new_{{{dictionaryName}}};
    return get_element_return_value;
    } /* {{{Interpreter.interpreter}}}_arg_to_{{{dictionaryName}}} */

    {{/body}}
    {{/is_array_object}}
    {{^is_array_object}}
    jerryx_arg_t
    {{{Interpreter.interpreter}}}_arg_{{{dictionaryName}}}({{{dictionaryName}}}* destination,
			{{{Interpreter.interpreter}}}_arg_optional_flag_enum_type optional_flag){{#private_header}};{{/private_header}}
    {{#body}}
    {
    /* the set up of the jerryx_arg_t is cribbed from
       https://tinyurl.com/yc8qjpna */
    {{! Note that the code from the documentation cannot be used for
        any struct with more than one of the same type field, since
	the code relies on "static" to create the prop_mapping data
	structure... }}
    static const char *prop_name_p[] = { {{#members}}"{{{memberName}}}"{{^finalMember}}, {{/finalMember}}{{/members}} };
    static jerryx_arg_t prop_mapping[{{{members.length}}}];
    {{#members}}
      {{#C_and_Jerryscript_Types}}
	prop_mapping[{{{member_index}}}] = {{{Interpreter.interpreter}}}_arg_{{{C_Type}}}(&(destination->{{{memberName}}}), INTERPRETER_ARG_REQUIRED);
      {{/C_and_Jerryscript_Types}}
    {{/members}}

    const jerryx_arg_object_props_t prop_info =
    {
        .name_p =    (const jerry_char_t **) prop_name_p,
	.name_cnt =  {{{members.length}}},
	.c_arg_p =   prop_mapping,
	.c_arg_cnt = {{{members.length}}}
    };
    return jerryx_arg_object_properties(&prop_info,
					(jerryx_arg_optional_t)optional_flag);
    } /* {{{Interpreter.interpreter}}}_arg_{{{dictionaryName}}} */

    {{/body}}
    {{/is_array_object}}
    
{{! end-if (not-)}}{{/original_arg_handling}}
{{! ******************************************************************* }}

    {{! really, these functions should be named "get_..._struct" rather
    	than "get_..._value" -- but b/c Jerryscript already has get_*_value
    	for all of the builtin types, it's easier to follow that naming
    	scheme for dictionaries and interfaces...}}
    {{! if }}{{#private_header}}
        {{{dictionaryName}}} {{{Interpreter.interpreter}}}_get_{{{dictionaryName}}}_value({{{Interpreter.Type}}} value);
    {{! end-if }}{{/private_header}}
    {{! else-if }}{{#body}}
        {{{dictionaryName}}} {{{Interpreter.interpreter}}}_get_{{{dictionaryName}}}_value({{{Interpreter.Type}}} value)
	{
	    {{{Interpreter.Type}}} object_value = jerry_value_to_object(value);
    	    {{{dictionaryName}}} return_struct;

    	    {{! if }}{{#is_array_object}}
    	        {
		    unsigned int array_length = jerry_get_array_length(value);
        {{! we're not really looping through the members, here, b/c we know
	    that this is an array type, so the first member will be the
	    length value, and the second member will be the actual array,
	    and the way to differentiate the two fields will be by looking
	    for the is_array flag in the C_and_Jerryscript_Types value }}
            	{{! for-all }}{{#members}}
            	    {{! looking-at-fields-in:}}{{#C_and_Jerryscript_Types}}
                    	{{! if }}{{^is_array}}
			    return_struct.length = array_length; /* we know the field names of this
                                               dictionary (b/c it's an array) */
                	{{! end-if (not-)}}{{/is_array}}
                	{{! else-if }}{{#is_array}}
        		    return_struct.items = ({{{C_Type}}} *)malloc(sizeof({{{C_Type}}})*array_length);
        		    for(int i = 0; i < array_length; i++)
            		        return_struct.items[i] = ({{{C_Type}}}){{{Interpreter.interpreter}}}_get_{{{C_Type}}}_value(jerry_get_property_by_index(value, i));
                	{{! end-if }}{{/is_array}}
            	   {{! done-with }}{{/C_and_Jerryscript_Types}}
                {{! end-for-all}}{{/members}}
        }	 
	    {{! end-if }}{{/is_array_object}}
	    {{! else }}{{^is_array_object}}
                {{! for-all }}{{#members}}
		    {{{Interpreter.Type}}} {{{memberName}}}_prop_name = jerry_create_string((const jerry_char_t *) "{{{memberName}}}");
    		    {{{Interpreter.Type}}} {{{memberName}}}_value = jerry_get_property(object_value, {{{memberName}}}_prop_name);
            	    {{! looking-at-fields-in:}}{{#C_and_Jerryscript_Types}}
    		        return_struct.{{{memberName}}} = ({{{C_Type}}}){{{Interpreter.interpreter}}}_get_{{{C_Type}}}_value({{{memberName}}}_value);
            	    {{! done-with }}{{/C_and_Jerryscript_Types}}
		    jerry_release_value({{{memberName}}}_prop_name);
       		    jerry_release_value({{{memberName}}}_value);
		{{! end-for-all }}{{/members}}
    	    {{! end-if (not-)}}{{/is_array_object}}

            jerry_release_value(object_value);

            return return_struct;
        } /* {{{Interpreter.interpreter}}}_get_{{{dictionaryName}}}_value */
    {{! end-if }}{{/body}}

    {{! if }}{{#is_array_object}}
        {{! if }}{{#private_header}}
    	    {{{dictionaryName}}} {{{Interpreter.interpreter}}}_get_{{{dictionaryName}}}_value_from_args(
		                              int starting_index,
	             			      const {{{Interpreter.Type}}} *args_p,
	                                      const jerry_length_t args_cnt);
	{{! end-if }}{{/private_header}}
	{{! if }}{{#body}}
    	    {{{dictionaryName}}} {{{Interpreter.interpreter}}}_get_{{{dictionaryName}}}_value_from_args(
		                              int starting_index,
	             			      const {{{Interpreter.Type}}} *args_p,
	                                      const jerry_length_t args_cnt)
	    {
    	        {{{dictionaryName}}} return_array = {0, 0};

    		{{! we're not really looping through the members,
		    here, b/c we know that this is an array type, so
		    the first member will be the length value, and the
		    second member will be the actual array, and the
		    way to differentiate the two fields will be by
		    looking for the is_array flag in the
		    C_and_Jerryscript_Types value }}

		{{! for-all }}{{#members}}
		    {{! looking-at-fields-in: }}{{#C_and_Jerryscript_Types}}
  		    	{{ if }}{{^is_array}} {{! array-length field}}
    			    unsigned int array_length = args_cnt-starting_index;
    			    return_array.length = array_length;
  			{{! end-if (not-)}}{{/is_array}}
			{{! if }}{{#is_array}} {{! array-values field}}
    			    if (array_length > 0)
    			    {
        		        return_array.items = ({{{C_Type}}} *)malloc(sizeof({{{C_Type}}})*array_length);
				/* TODO: check that malloc succeeded */
    			    }

    			    /* i is the index in the new array, loop_counter walks the args array */
    			    for(int i = 0, loop_counter = starting_index;
			        loop_counter < args_cnt;
				i++, loop_counter++)
				return_array.items[i] = ({{{C_Type}}}){{{Interpreter.interpreter}}}_get_{{{C_Type}}}_value(args_p[loop_counter]);
			{{! end-if }}{{/is_array}}
 		    {{! done-with }}{{/C_and_Jerryscript_Types}}
		{{! end-for-all }}{{/members}}
    		return return_array;
	    } /* {{{Interpreter.interpreter}}}_get_{{{dictionaryName}}}_value_from_args */
	{{! end-if }}{{/body}}
    {{! end-if }}{{/is_array_object}}

    /* like all the {{{Interpreter.interpreter}}}_create_* functions, this one takes a C
       variable and creates its Jerryscript/Javascript equivalent */
    {{! if }}{{#private_header}}
        {{{Interpreter.Type}}} {{{Interpreter.interpreter}}}_create_{{{dictionaryName}}}({{{dictionaryName}}} x);
    {{! end-if }}{{/private_header}}
    {{! if }}{{#body}}
        {{{Interpreter.Type}}} {{{Interpreter.interpreter}}}_create_{{{dictionaryName}}}({{{dictionaryName}}} x)
	{
	    {{{Interpreter.Type}}} new_jerry_value = jerry_create_object();

	    {{! if }}{{#is_array_object}}
    	        {{! for-all }}{{#members}}
    		    {{! looking-at-fields-in: }}{{#C_and_Jerryscript_Types}}
    		        {{! if }}{{#is_array}}
    			    for (int i = 0; i < x.length; i++)
    			    {
        		        {{{Interpreter.Type}}} next = {{{Interpreter.interpreter}}}_{{#is_object}}_{{/is_object}}create_{{{Jerryscript_Type}}}({{#is_string}}(const jerry_char_t *){{/is_string}}(x.items[i]));
    				jerry_release_value(jerry_set_property_by_index(new_jerry_value, i, next));
    				jerry_release_value(next);
    			    }
    			{{! end-if }}{{/is_array}}
    		    {{! done-with }}{{/C_and_Jerryscript_Types}}
    		{{! end-for-all }}{{/members}}
    	    {{! end-if }}{{/is_array_object}}
    	    {{! if }}{{^is_array_object}}
	        {{! for-all }}{{#members}}
    		    {{{Interpreter.Type}}} {{{memberName}}}_prop_name = jerry_create_string ((const jerry_char_t *) "{{{memberName}}}");
    		    {{! looking-at-fields-in: }}{{#C_and_Jerryscript_Types}}
    	    	        {{{Interpreter.Type}}} {{{memberName}}}_value = {{{Interpreter.interpreter}}}_{{#is_object}}_{{/is_object}}create_{{{Jerryscript_Type}}}({{#is_string}}(const jerry_char_t *){{/is_string}}x.{{{memberName}}});
    		    {{! done-with }}{{/C_and_Jerryscript_Types}}
    		    jerry_release_value(jerry_set_property(new_jerry_value, {{{memberName}}}_prop_name, {{{memberName}}}_value));
    		    jerry_release_value({{{memberName}}}_value);
    		    jerry_release_value({{{memberName}}}_prop_name);
    		{{! end-for-all}}{{/members}}
    	    {{! end-if (not-)}}{{/is_array_object}}

    	    return new_jerry_value;
	} /* {{{Interpreter.interpreter}}}_create_{{{dictionaryName}}} */
    {{! end-if }}{{/body}}

    {{! if }}{{#private_header}}
        bool {{{Interpreter.interpreter}}}_value_is_{{{dictionaryName}}}({{{Interpreter.Type}}} thing_value);

    {{! end-if }}{{/private_header}}
    {{! else-if }}{{#body}}
        bool {{{Interpreter.interpreter}}}_value_is_{{{dictionaryName}}}({{{Interpreter.Type}}} thing_value)
	{
    	    {{! if }}{{#is_array_object}}
    	        if (!jerry_value_is_array(thing_value))
        	    return false;
    		else
    		{
        	    if (jerry_get_array_length(thing_value) == 0)
	    	        return true;
		    else
		    {
		        {{! TODO: maybe check every element? }}
			{{! for-all }}{{#members}}
			    {{! looking-at-fields-in:}}{{#C_and_Jerryscript_Types}}
			        {{! if }}{{#is_array}}
	    		    	    jerry_value_t first_element = jerry_get_property_by_index(thing_value, 0);
	    			    bool is_target_value = {{{Interpreter.interpreter}}}_value_is_{{{C_and_Jerryscript_Types.C_Type}}}(first_element);
	    			    jerry_release_value(first_element);

				    return is_target_value;
			        {{! end-if }}{{/is_array}}
			    {{! done-with }}{{/C_and_Jerryscript_Types}}
			{{! end-for-all }}{{/members}}
		    }
    		}
    	    {{! end-if }}{{/is_array_object}}
    	    {{! if }}{{^is_array_object}}
    	        /* it's perfectly legal for a dictionary to be built
       		    without using "new", in which case, checking its
       		    type won't give us the actual dictionary type
       		    we're looking for -- it'll just give us "object";
       		    instead, we'll walk through an object's fields
       		    and, if they're all there and of the right type,
       		    then we'll return true */
		{{! for-all }}{{#members}}
        	    if (!{{{Interpreter.interpreter}}}__has_own_property(thing_value,
                                          "{{{memberName}}}"))
            	        return false;
        	    else
        	    {
		        {{! looking-at-fields-in: }}{{#C_and_Jerryscript_Types}}
            		    {{{Interpreter.Type}}} field = {{{Interpreter.interpreter}}}__get_property(thing_value,
                                                            "{{{memberName}}}");
	    		    bool value_is_right_type = {{{Interpreter.interpreter}}}_{{#is_object}}_{{/is_object}}value_is_{{{C_Type}}}(field);
            		    jerry_release_value(field);

            		    if (!value_is_right_type)
                	        return false;
			{{! done-with }}{{/C_and_Jerryscript_Types}}
        	    }
		{{! end-for-all }}{{/members}}

    	        /* fall-through indicates that we have an object of this type */
    	        return true;
            {{! end-if (not-)}}{{/is_array_object}}
        } /* {{{Interpreter.interpreter}}}_value_is_{{{dictionaryName}}} */
    {{! end-if }}{{/body}}
    {{! if }}{{#body}}
    	static {{{Interpreter.Type}}}
	create_{{{dictionaryName}}}_handler(const {{{Interpreter.Type}}} func_value,
                   const {{{Interpreter.Type}}} this_val,
                   const {{{Interpreter.Type}}} *args_p,
                   const jerry_length_t args_cnt)
	{
	    {{{Interpreter.Type}}} new_{{{dictionaryName}}} = jerry_create_object();
    	    {{{Interpreter.Type}}} prototype = get_prototype((char *) "{{{dictionaryName}}}");
    	    jerry_release_value(jerry_set_prototype(new_{{{dictionaryName}}}, prototype));
    	    jerry_release_value(prototype);

    	    {{! for-all }}{{#members}}
    	        {
        	    {{{Interpreter.Type}}} value_of_field;

        	    if ((((signed int)args_cnt)-1) >= {{{member_index}}})
	    	        value_of_field = args_p[{{{member_index}}}];
		    else
		    {{! looking-at-fields-in:}}{{#C_and_Jerryscript_Types}}
	    	    	value_of_field = {{{Interpreter.interpreter}}}_{{#is_object}}_{{/is_object}}create_{{{Jerryscript_Type}}}({{#is_string}}(jerry_char_t *)"{{/is_string}}{{{default_value}}}{{#is_string}}"{{/is_string}});
		    {{/C_and_Jerryscript_Types}}
		    interpreter__set_property(new_{{{dictionaryName}}}, "{{{memberName}}}", value_of_field);
    		}
    	    {{! end-for-all }}{{/members}}

    	    return new_{{{dictionaryName}}};
	} /* create_{{{dictionaryName}}}_handler */
    {{! end-if }}{{/body}}

    {{! if }}{{#private_header}}
    	void initialize_{{{dictionaryName}}}_(void);
    {{! end-if }}{{/private_header}}
    {{! else-if }}{{#body}}
    	void initialize_{{{dictionaryName}}}_(void)
	{
	    /* first, check to see if the prototype object exists for this
       	       dictionary; if so, just return */
    	    {{{Interpreter.Type}}} prototype = get_prototype((char *)"{{{dictionaryName}}}");
    	    if (!jerry_value_is_error(prototype) &&
                !jerry_value_is_undefined(prototype))
    	    {
                jerry_release_value(prototype);
		return;
    	    }

    	    /* create the prototype object */
    	    {{{Interpreter.Type}}} global_object = jerry_get_global_object();

    	    /* add all of the dictionary fields, and set them to undefined */
    	    {{{Interpreter.Type}}} {{{dictionaryName}}}_prototype_object = jerry_create_object();
    	    {{! for-all }}{{#members}}
    	        add_field_to_object({{{dictionaryName}}}_prototype_object,
                           "{{{memberName}}}", NULL);
    	    {{! end-for-all }}{{/members}}

    	    /* store the prototype in the global prototypes holder */
    	    register_prototype((char *)"{{{dictionaryName}}}", {{{dictionaryName}}}_prototype_object);
    	    jerry_release_value({{{dictionaryName}}}_prototype_object);

    	    /* this sets up the ability to "new" the object */
    	    add_field_to_object(global_object, "{{{dictionaryName}}}", &create_{{{dictionaryName}}}_handler);

    	    jerry_release_value(global_object);

    	    /* finally, make sure that all of the types upon which this type
       	       depends have been loaded; note that if there's a cycle,
       	       initializing all of the included data structures after we
       	       create this one should(?) keep us from running infinitely */
	    {{! for-all }}{{#externalTypes}}
    	       	   initialize_{{{type}}}_();
	    {{! end-for-all }}{{/externalTypes}}
	    {{! for-all }}{{#non_intrinsic_types}}
  	        {{! typedef'd types don't need an initialization if their
      	    	    ultimate type is a primitive type (since those don't
      	    	    have initializors) }}
  		{{! if }}{{#needs_initialization}}
    		    initialize_{{{type_name}}}_();
  		{{! end-if }}{{/needs_initialization}}
	    {{! end-for-all }}{{/non_intrinsic_types}}

        } /* initialize_{{{dictionaryName}}}_ */

        /* we need to register the initialize_{{{dictionaryName}}}_ function so
           that it gets run automatically... */
        __attribute__((constructor))
        static void register_initialize_{{{dictionaryName}}}(void)
    	{
	    /* ...supplied by webidl_utilities */
    	    {{{dictionaryName}}}_uid = get_type_uid();

    	    /* ...supplied by webidl_utilities... */
    	    register_initialization_function(initialize_{{{dictionaryName}}}_);
        } /* register_initialize_{{{dictionaryName}}} */
    {{! end-if }}{{/body}}

    {{! if }}{{#debug_printing}}
    	{{! TODO: THIS DOES NOT HANDLE ARRAYS! }}
	{{! if }}{{#private_header}}
	    void debug_print_{{{dictionaryName}}} (char *variable_name,
     				      {{{dictionaryName}}} value,
				      unsigned int indentation);
	{{! end-if }}{{/private_header}}
	{{! else-if }}{{#body}}
	    void debug_print_{{{dictionaryName}}} (char *variable_name,
     				      {{{dictionaryName}}} value,
				      unsigned int indentation)
	    {
   	        /* we can get into infinite recursion, with one
      		   structure printing a second, which prints the
      		   first, and so on -- a simple mechnism would be to
      		   return whenever the indentation (which tracks
      		   recursion depth) gets too big */
   		if (indentation > DEBUG_RECURSION_DEPTH_TOO_BIG)
   		{
       		    printf("%*s%s -- RECURSION HALTED\n", indentation, "", variable_name);
       		    return;
   		}
   	        {{! if }}{{#is_array_object}}
   		    printf("%*s%s:\n%*s[\n", indentation, "", variable_name, indentation, "");
   		    {{! for-all }}{{#members}}
   		        {{! looking-at-fields-in:}}{{#C_and_Jerryscript_Types}}
   		            {{! if }}{{#is_array}}
   			        for(int i = 0; i < value.length; i++)
          		            debug_print_{{{C_Type}}}(debug_itoa(i), value.items[i], indentation+DEBUG_INDENTATION_WIDTH);
   			    {{! end-if}}{{/is_array}}
   		        {{! done-with }}{{/C_and_Jerryscript_Types}}
   		    {{!end-for-all }}{{/members}}
   		    printf("%*s]\n", indentation, "");
   		{{! end-if}}{{/is_array_object}}
   		{{! else-if}}{{^is_array_object}}
   		    printf("%*s%s:\n", indentation, "", variable_name);
   		    {{! for-all }}{{#members}}
   		        {{! looking-at-fields-in:}}{{#C_and_Jerryscript_Types}}
   			    debug_print_{{{C_Type}}}("{{{memberName}}}", value.{{{memberName}}}, indentation+DEBUG_INDENTATION_WIDTH);
   			{{! done-with }}{{/C_and_Jerryscript_Types}}
   		    {{! end-for-all}}{{/members}}
   		{{! end-if (not-)}}{{/is_array_object}}
	    } /* debug_print_{{{dictionaryName}}} */
	{{! end-if }}{{/body}}
    {{! end-if }}{{/debug_printing}}
{{! end-if (not-)}}{{/header}}

{{! if }}{{#private_header}}
#endif /* PRIVATE_{{{dictionaryName}}}_H_ */
{{! end-if }}{{/private_header}}
{{! else-if}}{{#header}}
#endif /* {{{dictionaryName}}}_H_ */
{{! end-else }}{{/header}}

{{! end-for-all }}{{/dictionaries}}
