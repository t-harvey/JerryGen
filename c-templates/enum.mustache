{{! Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
}}

{{! Mustache doesn't understand how to transfer blank lines from this
    script file to the output file unless those blank lines are within
    a #<name> construct, so we wrap this entire script with a name
    that shouldn't(?)(!) be in the input file }}
{{^OBEYFORMATTING}}
{{! This one .mustache file is used to create both the .h and the .c
    *_Types files -- look for the "body" and "header" markers }}
{{#print_generation_message}}
/* AUTOMATICALLY GENERATED ON {{timestamp}} */
{{/print_generation_message}}
{{#enums}}
{{^body}}
#ifndef {{#private_header}}PRIVATE_{{/private_header}}{{{enumName}}}_ENUM_H_
#define {{#private_header}}PRIVATE_{{/private_header}}{{{enumName}}}_ENUM_H_
{{/body}}

#include "{{{utilities_filename}}}{{^header}}_private{{/header}}.h"

{{#private_header}}
#include "{{{enumName}}}.h"

{{/private_header}}
{{#body}}
#include "{{{enumName}}}_private.h"

{{/body}}
{{#header}}
#include "jerryscript.h"
typedef enum { {{#members}}{{{indentation}}}{{{C_name}}}{{^finalMember}},{{{new_line}}}{{/finalMember}}{{#onlyOneMember}} }{{/onlyOneMember}}{{/members}}
{{^onlyOneMember}}} {{/onlyOneMember}}{{{enumName}}};
{{/header}}
{{#body}}
static int number_of_{{{enumName}}} = {{{members.length}}};
{{/body}}
{{^private_header}}
/* this variable is used in composite types to denote a field of type
   {{{interfaceName}}} -- this should be considered a read-only value */
{{#header}}extern {{/header}}int {{{enumName}}}_uid;

{{! TODO: what if the "members" list is empty?!?"}}
/* all WebIDL constructs have a constructor function, so that C code
   can build any of these constructs -- for enums, just return the
   first symbol in the list */
{{{enumName}}} {{{enumName}}}_constructor(void){{#header}};{{/header}}
{{#body}}
{
    return {{{members.0.C_name}}};
} /* {{{enumName}}}_constructor */
{{/body}}
{{/private_header}}
{{^header}}
{{#private_header}}

/* these are the support functions and definitions that are used by the
   generated code, but should not be used by the programmer */

{{/private_header}}

{{! we first need strings that match the enumeration values }}
{{#body}}
static char *{{{enumName}}}_C_strings[] = { {{#members}}{{{indentation}}}{{{indentation}}}[{{{C_name}}}] = "{{{C_name}}}"{{^finalMember}},{{{new_line}}}{{/finalMember}}{{#onlyOneMember}} };{{/onlyOneMember}}{{/members}}
{{^onlyOneMember}}};{{/onlyOneMember}}

static char *{{{enumName}}}_Javascript_strings[] = { {{#members}}{{{indentation}}}{{{indentation}}}[{{{C_name}}}] = "{{{Javascript_name}}}"{{^finalMember}},{{{new_line}}}{{/finalMember}}{{#onlyOneMember}} };{{/onlyOneMember}}{{/members}}
{{^onlyOneMember}}};{{/onlyOneMember}}

{{/body}}
{{{enumName}}} {{{Interpreter.interpreter}}}_get_{{{enumName}}}_value({{{Interpreter.Type}}} value){{#private_header}};{{/private_header}}
{{#body}}
{
{{! TODO: check that enum_index doesn't return -1! }}
{{! TODO: do we have to explicitly deallocate interpreter_get_string_value's? }}
    return ({{{enumName}}})enum_index({{{Interpreter.interpreter}}}_get_string_value(value), {{{enumName}}}_Javascript_strings, number_of_{{{enumName}}});
} /* {{{Interpreter.interpreter}}}_get_{{{enumName}}}_value */

{{/body}}
{{^original_arg_handling}}
{{#private_header}}
/* this one has to use its own function, b/c Jerryscript doesn't have
   a floating-point version */
#define {{{Interpreter.interpreter}}}_arg_{{{enumName}}}(x, z) \
            jerryx_arg_custom(x, \
                             (uintptr_t)&((uintptr_t []){(uintptr_t)COERCION_POLICY, \
                                             (uintptr_t)z}), \
                              {{{Interpreter.interpreter}}}_arg_to_{{{enumName}}})
{{/private_header}}

/* the transform function for enums requires us to use the pre-defined
   transform function for strings to grab that result and convert the
   string to the enum */
jerry_value_t {{{Interpreter.interpreter}}}_arg_to_{{{enumName}}}(jerryx_arg_js_iterator_t *js_arg_iter_p,
                                       const jerryx_arg_t *c_arg_p){{#private_header}};{{/private_header}}
{{#body}}
{
    char temp_buffer[{{{longest_Javascript_name_length}}}+1];

    uintptr_t *extra_info = (uintptr_t*)(c_arg_p->extra_info);

    /* we naively access c_arg_p as if we know(!) that there are two
       parameters, one for the coercion flag, and one for the optional flag */
    jerryx_arg_t get_string = {{{Interpreter.interpreter}}}_arg_string_no_malloc(temp_buffer,
						     {{{longest_Javascript_name_length}}}+1,
                                                     extra_info[0],
                                                     extra_info[1]);
    jerry_value_t convert_to_string_result =
                     get_string.func(js_arg_iter_p, &get_string);

    if (!jerry_value_is_error(convert_to_string_result))
    {
        int temp_value = enum_index(temp_buffer,
					 {{{enumName}}}_Javascript_strings,
					 number_of_{{{enumName}}});
	if (temp_value == -1)
	{
	    char *main_error_string_part_1 = "String >";
	    int part1_length = strlen(main_error_string_part_1);
	    char *main_error_string_part_2 = "< does not match {{{enumName}}} type.";
	    int part2_length = strlen(main_error_string_part_2);
	    char error_string[part1_length + part2_length +
	                      {{{longest_Javascript_name_length}}}+1];
	    strcpy(error_string, main_error_string_part_1);
	    strcpy(error_string+part1_length, temp_buffer);
	    strcpy(error_string+(part1_length + strlen(temp_buffer)),
		   main_error_string_part_2);
	    error_string[part1_length+part2_length+strlen(temp_buffer)+1] =
								           '\0';
	    return jerry_create_error(JERRY_ERROR_TYPE,
                                      (const jerry_char_t *) error_string);
	}
	else
            *(({{{enumName}}} *)(c_arg_p->dest)) = ({{{enumName}}})temp_value;
    }
    return convert_to_string_result;
} /* {{{Interpreter.interpreter}}}_arg_to_float */

{{/body}}
{{/original_arg_handling}}
{{{Interpreter.Type}}} {{{Interpreter.interpreter}}}_create_{{{enumName}}}({{{enumName}}} x){{#private_header}};{{/private_header}}
{{#body}}
{
    return {{{Interpreter.interpreter}}}_create_string ((const jerry_char_t *) {{{enumName}}}_Javascript_strings[x]);
} /* {{{Interpreter.interpreter}}}_create_{{{enumName}}} */

{{/body}}
bool {{{Interpreter.interpreter}}}_value_is_{{{enumName}}}({{{Interpreter.Type}}} thing_value){{#private_header}};{{/private_header}}
{{#body}}
{
    if (!jerry_value_is_string(thing_value))
        return false;
    else
    {
        char *enum_string = {{{Interpreter.interpreter}}}_get_string_value(thing_value);
	if (enum_index(enum_string,
	               {{{enumName}}}_Javascript_strings,
	   	       number_of_{{{enumName}}}) != -1)
	    return true;
	else
	    return false;
    }
} /* {{{Interpreter.interpreter}}}_value_is_{{{enumName}}} */

{{/body}}
{{! the following greatly(!) simplifies the code elsewhere, b/c we
    assume every type has this function, even though enums don't need to
    do anything }}
{{#private_header}}
/* this can be ignored; it simplifies the definition of interfaces
   that include this type... */
#define initialize_{{{enumName}}}_()
{{/private_header}}

{{#body}}
/* every type needs a uid (supplied by webidl_utilities), so set it up here */
__attribute__((constructor))
static void register_{{{enumName}}}_uid(void)
{
    {{{enumName}}}_uid = get_type_uid();
} /* register_{{{enumName}}}_uid */
{{/body}}
{{/header}}
{{^private_header}}
{{#debug_printing}}

void debug_print_{{{enumName}}} (char *variable_name,
                                      {{{enumName}}} value,
                                      unsigned int indentation){{#header}};{{/header}}
{{#body}}
{
    if (!(value < number_of_{{{enumName}}}))
    	printf("%*s%s: the value passed in is not a valid {{{enumName}}} value\n",
                                      indentation, "", variable_name);
    else
        printf("%*s%s: %s\n", indentation, "", variable_name, {{{enumName}}}_C_strings[value]);
} /* debug_print_{{{enumName}}} */
{{/body}}
{{/debug_printing}}
{{/private_header}}
{{^body}}

#endif /* {{#private_header}}PRIVATE_{{/private_header}}{{{enumName}}}_ENUM_H_ */
{{/body}}
{{/enums}}
{{/OBEYFORMATTING}}
