{{! Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
}}

{{! Mustache doesn't understand how to transfer blank lines from this
    script file to the output file unless those blank lines are within
    a #<name> construct, so we wrap this entire script with a name
    that shouldn't(?)(!) be in the input file }}
{{^OBEYFORMATTING}}
{{! This one .mustache file is used to create both the .h and the .c
    files -- look for the "body", "private_header", and "header" markers }}
{{!
    Callbacks are used differently according to context; we will pass
    around a "callback" as a calling_context, which is a struct of
    two Interpreter_Type's, one for the function pointer, and the other
    for the "this" pointer; the services provided for callbacks are:

    1) initialize -- this really just calls all of the initializers
    for the types used by this callback

    2) interpreter_get_<callback>_value -- this works just like any other
    interpreter_get_*_value and returns a function-pointer-thing,
    meaning that it can't be invoked except through the
    function-pointer-thing-run'er, called run_<callback>_handler

    3) run_<callback>_handler -- this is the C function that will be
    run when the Javascript user invokes his callback; unlike
    most(all?) of the other _handler's, this function looks at the
    "function" Interpreter_Type (the first parameter to the handler) to
    either invoke it as a Javascript function, or grab the
    Native_Object associated with that value -- which will be a C
    function pointer -- and run that directly

    4) interpreter_create_<callback> -- this takes a C function
    pointer and returns a calling_context using the following
    methodology:
        1) create an empty object
	2) make it invokable (with interpreter_create_external_function())
	3) assign the C-function pointer to the Native Object of our
	   new object
	4) build a calling_context out of the object (with NULL for
    	   the "this" value, unless we have one...)

    5) interpreter_value_is_<callback> -- composite types require us to
    discern the type of a Javascript thing, so every WebIDL type has
    to have its own _is_ function to positively identify the type
    
    
}}
{{#callbacks}}
{{#print_generation_message}}
/* AUTOMATICALLY GENERATED ON {{timestamp}} */
{{/print_generation_message}}
{{^body}}
#ifndef {{#private_header}}PRIVATE_{{/private_header}}{{{callbackName}}}_H_
#define {{#private_header}}PRIVATE_{{/private_header}}{{{callbackName}}}_H_
{{/body}}

#include "jerryscript.h"

{{^body}}
#include "{{{utilities_filename}}}{{^header}}_private{{/header}}.h"

{{#externalTypes}}
#include "{{{type}}}{{^header}}_private{{/header}}.h"
{{/externalTypes}}
{{#non_intrinsic_types}}
#include "{{{type_name}}}{{^header}}_private{{/header}}.h"
{{/non_intrinsic_types}}

{{/body}}
{{^header}}
#include "{{{callbackName}}}{{#body}}_private{{/body}}.h"

{{/header}}
{{#header}}
typedef {{{Interpreter.Type}}} {{{callbackName}}};
/* this is the type signature of functions that can be assigned
   to a {{{callbackName}}} */
typedef {{#C_and_Jerryscript_Types}}{{{C_Type}}}{{/C_and_Jerryscript_Types}} (* {{{callbackName}}}_callback) ({{#arguments}}{{#C_and_Jerryscript_Types}}{{{C_Type}}}{{/C_and_Jerryscript_Types}}{{^finalArgument}}, {{/finalArgument}}{{/arguments}});

{{/header}}
{{^private_header}}
/* this variable is used in composite types to denote a field of type
   {{{callbackName}}} -- this should be considered a read-only value */
{{#header}}extern {{/header}}int {{{callbackName}}}_uid;

/* all WebIDL constructs have a constructor function, so that C code
   can build any of these constructs -- for callbacks, we just return
   a NULL pointer */
{{{callbackName}}} {{{callbackName}}}_constructor(void){{#header}};{{/header}}
{{#body}}
{
    return jerry_create_undefined();
} /* {{{callbackName}}}_constructor */

{{/body}}

{{/private_header}}
{{^header}}
{{#private_header}}
/* these are the support functions and definitions that are used by the
   generated code, but should not be used by the programmer */

{{/private_header}}
{{#private_header}}
#define {{{Interpreter.interpreter}}}_arg_{{{callbackName}}}(x, z) \
	jerryx_arg_function(x, (jerryx_arg_optional_t)z)
{{/private_header}}
{{#body}}
static {{{Interpreter.Type}}}
run_{{{callbackName}}}_function_handler(
	     const {{{Interpreter.Type}}} func_value, /**< function object */
	     const {{{Interpreter.Type}}} this_val, /**< this arg */
             const {{{Interpreter.Type}}} *args_p, /**< function arguments */
             const jerry_length_t args_cnt) /**< number of function arguments */
{
    {{> demarshal_args}}

{{#C_and_Jerryscript_Types}}
{{! for the "return_value", the logic is as follows: 1. don't put out
the declaration if it's a void return type or this function returns
the "this" pointer (is that possible with a callback, in WebIDL?); 2.
put out the declaration with an assignment from "run" routine }}
    {{^voidReturnType}}{{^return_is_this}}{{{C_Type}}} return_value = {{/return_is_this}}{{/voidReturnType}}run_{{{callbackName}}}_function(func_value, this_val{{^arguments.length}});{{/arguments.length}}{{#arguments.length}},{{/arguments.length}}
{{#arguments}}{{{indentation}}}{{{name}}}{{{separator}}}{{/arguments}}{{#arguments.length}};{{/arguments.length}}

{{/C_and_Jerryscript_Types}}
    {{! if the return value is a string (or array of strings), we want
        to enter it into the Jerryscript environment _before_ we
        deallocate our local strings, as it's possible that the return
        value is just a copy of one of args }}
    {{#C_and_Jerryscript_Types}}
        {{#is_string}}
    {{! DOES THE FOLLOWING COVER ALL OF THE PERMUTATIONS? }}
    /* put the string into Jerryscript before we cleanup any string arguments */
    {{{Interpreter.Type}}} string_value = jerry_create_string({{^is_array}}(const jerry_char_t *){{/is_array}}return_value);
        {{/is_string}}
    {{/C_and_Jerryscript_Types}}
    {{! FREE MALLOC'D STRINGS}}
    {{#arguments}}
        {{#C_and_Jerryscript_Types}}
	    {{^callback}}
	        {{#is_string}}
		{{^is_array}}
    if ({{{name}}} != NULL) free({{{name}}});
		{{/is_array}}
       		{{/is_string}}
    	    {{/callback}}
        {{/C_and_Jerryscript_Types}}
    {{/arguments}}
    {{#C_and_Jerryscript_Types}}
        {{#return_is_this}}
    /* return a reference back to this interface */
    return jerry_acquire_value(this_val);
        {{/return_is_this}}
        {{^return_is_this}}
            {{#voidReturnType}}
    /* void return value */
    return jerry_create_undefined();
            {{/voidReturnType}}
            {{^voidReturnType}}
                {{^is_string}}
    return {{{Interpreter.interpreter}}}_create_{{{Jerryscript_Type}}}(return_value);
                {{/is_string}}
                {{#is_string}}
     return string_value;
                {{/is_string}}
            {{/voidReturnType}}
        {{/return_is_this}}
    {{/C_and_Jerryscript_Types}}
} /* run_{{{callbackName}}}_function_handler */

{{/body}}

{{! TODO: WE (CURRENTLY) IGNORE ARRAYS OF CALLBACKS!!! }}
{{{callbackName}}}
{{{Interpreter.interpreter}}}_get_{{{callbackName}}}_value({{{Interpreter.Type}}} value){{#private_header}};{{/private_header}}
{{#body}}
{
    /* we don't actually do anything for "get", as we treat all
       functions as residing on the Javascript side (so callbacks have
       to be invoked through the "run" routine, below) */
    return jerry_value_to_object(value);
} /* {{{Interpreter.interpreter}}}_get_{{{callbackName}}}_value */

{{/body}}

/* like all of the {{{Interpreter.interpreter}}}_create_* functions, this one takes a C
   variable and creates its Jerryscript/Javascript equivalent */
{{#body}}
/* callbacks are simply functions, so when we want to create a
   callback, what it means in the world of Jerryscript is that we want to
   assign the C function to some callable thing on the Javascript
   side; as usual, return a callback context, since that is our
   abstraction of Jerryscript functions */
{{/body}}
{{{callbackName}}} {{{Interpreter.interpreter}}}_convert_C_functon_to_{{{callbackName}}}({{{callbackName}}}_callback callback_function){{#private_header}};

{{/private_header}}
{{#body}}
{
    {{{Interpreter.Type}}} new_function = jerry_create_external_function(
                                       run_{{{callbackName}}}_function_handler);

    {{{Interpreter.checksum_type}}} checksum = {};
    Native_Object_set(new_function, callback_function, &checksum);

    return new_function;
} /* {{{Interpreter.interpreter}}}_convert_C_function_to_{{{callbackName}}} */

{{/body}}
/* the create function for callbacks is just the identity, since we
   pass them around as {{{Interpreter.Type}}}'s */
{{{callbackName}}} {{{Interpreter.interpreter}}}_create_{{{callbackName}}}({{{callbackName}}} callback_function){{#private_header}};{{/private_header}}
{{#body}}
{
     return callback_function;
} /* {{{Interpreter.interpreter}}}_create_{{{callbackName}}} */
{{/body}}

bool {{{Interpreter.interpreter}}}_value_is_{{{callbackName}}}({{{Interpreter.Type}}} thing_value){{#private_header}};{{/private_header}}
{{#body}}
{
    {{! TODO: IS THIS REALLY THE BEST WE CAN DO?!? }}
    if (!jerry_value_is_function(thing_value))
        return false;
    else
    {
        jerry_value_t length_property = 
                           jerry_create_string((const jerry_char_t *)"length");
        jerry_value_t length_value =
	                     jerry_get_property(thing_value, length_property);
	int number_of_parameters = (int)jerry_get_number_value(length_value);
        jerry_release_value(length_value);
        jerry_release_value(length_property);

        if (number_of_parameters != {{{arguments.length}}})
            return false;
    }
    /* fall-through indicates success */
    return true;
} /* {{{Interpreter.interpreter}}}_value_is_{{{callbackName}}} */
{{/body}}


{{#body}}
/* we'll use these wrapper functions to marshal the parameters for
   the function and then call the function through the interpreter */
{{! this function may look extraneous, but imagine the following
    scenario: we're passed in a stucture with a callback value; it
    could be a function defined in the Javascript world and just
    represented by a jerry_value_t, or it could be a function defined
    as a C function and carried around in the Native_Object of an
    otherwise empty Javascript object; we have no way to tell the
    difference, so this routine figures it out and does the
    appropriate thing }}
{{/body}}
{{#C_and_Jerryscript_Types}}{{{C_Type}}}{{/C_and_Jerryscript_Types}} run_{{{callbackName}}}_function(const {{{callbackName}}} {{{callbackName}}}_function, {{{Interpreter.Type}}} this_ptr{{^arguments.length}}){{#private_header}};{{/private_header}}{{/arguments.length}}{{#arguments.length}},{{/arguments.length}}
{{#arguments}}{{{indentation}}}{{#C_and_Jerryscript_Types}}{{{C_Type}}} {{{name}}}{{{separator}}}{{/C_and_Jerryscript_Types}}{{/arguments}}{{#arguments.length}}{{#private_header}};{{/private_header}}{{/arguments.length}}
{{#body}}
{
    /* check to see if the Jerryscript value has an underlying C-function
       pointer attached to it (hidden in the Native_Object field) */
    static {{{Interpreter.checksum_type}}} checksum = {};
    {{{Interpreter.error_type}}} error_value;
    {{{callbackName}}}_callback native_c_function;

    native_c_function =
        ({{{callbackName}}}_callback)Native_Object_get({{{callbackName}}}_function,
					      &checksum, &error_value);
    if (native_c_function != NULL)
    {
        /* if there's a valid C function, call it */
        {{^voidReturnType}}return {{/voidReturnType}}native_c_function( {{#arguments}}{{{name}}}{{^finalArgument}},{{/finalArgument}}{{/arguments}} );
    }
    else
    {
        /* if this is a function called from inside Jerryscript,
	   convert all of the passed-in parameters to {{{Interpreter.Type}}}'s and
    	   make the call */
{{#arguments}}{{#C_and_Jerryscript_Types}}
        {{{Interpreter.Type}}} {{{name}}}_value = {{{Interpreter.interpreter}}}_create_{{{Jerryscript_Type}}}({{#is_string}}(const jerry_char_t *){{/is_string}}{{{name}}});
{{/C_and_Jerryscript_Types}}{{/arguments}}

        {{{Interpreter.Type}}} argv[] = { {{#arguments}}{{{name}}}_value{{^finalArgument}},{{/finalArgument}}{{/arguments}} };
        {{{Interpreter.Type}}} jerry_return_value =
	              jerry_call_function({{{callbackName}}}_function,
					  this_ptr,
					  argv, {{{arguments.length}}});
	
    {{#C_and_Jerryscript_Types}}
    {{^voidReturnType}}
        return ({{{C_Type}}}){{{Interpreter.interpreter}}}_get_{{{C_Type}}}_value(jerry_return_value);
    {{/voidReturnType}}
    {{/C_and_Jerryscript_Types}}
    }
} /* run_{{{callbackName}}}_function */
{{/body}}

void initialize_{{{callbackName}}}_(void){{#private_header}};{{/private_header}}
{{#body}}
{
    /* even though we don't actually store anything for callbacks,
       we'll create a prototype object for each callback in the
       Javascript environment to ensure that we only call this
       initialization code once (this also ensures that we don't
       get into an infinite loop of initialization routines calling
       each other) */

    /* first, check to see if the prototype object exists for this
       callback; if so, just return */
    {{{Interpreter.Type}}} prototype = get_prototype((char *)"{{{callbackName}}}");
    if (!jerry_value_is_error(prototype) &&
        !jerry_value_is_undefined(prototype))
    {
        jerry_release_value(prototype);
	return;
    }

    /* create the prototype object */
    {{{Interpreter.Type}}} {{{callbackName}}}_prototype_object = jerry_create_object();

    /* store the prototype in the global prototypes holder */
    {{{Interpreter.Type}}} global_object = jerry_get_global_object();
    register_prototype((char *)"{{{callbackName}}}", {{{callbackName}}}_prototype_object);

    jerry_release_value(global_object);
    jerry_release_value({{{callbackName}}}_prototype_object);

    /* finally, make sure that all of the types upon which the callback
       depends have been loaded; note that if there's a cycle,
       initializing all of the included data structures _after_ we
       create this one should(?) keep us from running infinitely
       (this list could be empty: ) */
{{#externalTypes}}
    initialize_{{{type}}}_();
{{/externalTypes}}
{{#non_intrinsic_types}}
  {{! typedef'd types don't need an initialization if their ultimate
      type is a primitive type (since those don't have initializors) }}
  {{#needs_initialization}}
    initialize_{{{type_name}}}_();
  {{/needs_initialization}}
{{/non_intrinsic_types}}

} /* initialize_{{{callbackName}}}_ */

/* we need to register the initialize_{{{callbackName}}}_ function so
   that it gets run automatically... */
__attribute__((constructor))
static void register_initialize_{{{callbackName}}}(void)
{
    /* ...supplied by webidl_utilities */
    {{{callbackName}}}_uid = get_type_uid();
    
    /* ...supplied by webidl_utilities... */
    register_initialization_function(initialize_{{{callbackName}}}_);
} /* register_initialize_{{{callbackName}}} */

{{/body}}
{{/header}}
{{^private_header}}
{{#debug_printing}}
void debug_print_{{{callbackName}}} (char *variable_name,
     				      {{{callbackName}}} value,
				      unsigned int indentation){{#header}};{{/header}}
{{#body}}
{
    /* check to see if the calling_context has an underlying
       C-function pointer attached to the Jerryscript object (hidden in
       the Native_Object field) */
    static {{{Interpreter.checksum_type}}} checksum = {};
    {{{Interpreter.error_type}}} error_value;
    {{{callbackName}}}_callback native_c_function;

    native_c_function =
          Native_Object_get(value,
			    &checksum, &error_value);
 
   printf("%*s%s -- CALLBACK FUNCTION (Native %s implementation)\n",
          indentation, "", variable_name,
          (native_c_function != NULL)?"C":"Javascript");
} /* debug_print_{{{callbackName}}} */
{{/body}}
{{/debug_printing}}
{{/private_header}}
{{^body}}

#endif /* {{#private_header}}PRIVATE_{{/private_header}}{{{callbackName}}}_H_ */
{{/body}}
{{/callbacks}}
{{/OBEYFORMATTING}}
