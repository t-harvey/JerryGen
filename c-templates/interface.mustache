{{! Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
}}

{{! Mustache doesn't understand how to transfer blank lines from this
    script file to the output file unless those blank lines are within
    a #<name> construct, so we wrap this entire script with a name
    that shouldn't(?)(!) be in the input file }}
{{^OBEYFORMATTING}}
{{#interfaces}}
{{#print_generation_message}}
/* AUTOMATICALLY GENERATED ON {{timestamp}} */
{{/print_generation_message}}

{{^body}}
#ifndef {{#private_header}}PRIVATE_{{/private_header}}{{{interfaceName}}}_H_
#define {{#private_header}}PRIVATE_{{/private_header}}{{{interfaceName}}}_H_
{{/body}}

{{#header}}
{{! We have to make sure that the type is defined before any
    composites that use it are #include'd... }}
typedef {{{Interpreter.Type}}} {{{interfaceName}}};

{{/header}}
{{^body}}
{{#externalTypes}}
#include "{{{type}}}{{#private_header}}_private{{/private_header}}.h"
{{/externalTypes}}
{{#non_intrinsic_types}}
#include "{{{type_name}}}{{#private_header}}_private{{/private_header}}.h"
{{/non_intrinsic_types}}
{{#prototype_chain}}
#include "{{{parentName}}}{{#private_header}}_private{{/private_header}}.h"
{{/prototype_chain}}

{{/body}}
#include "jerryscript.h"
{{^body}}
#include "{{{utilities_filename}}}{{#private_header}}_private{{/private_header}}.h"
{{/body}}
{{#header}}
#include "{{{interfaceName}}}_stubs.h"
{{/header}}
{{#private_header}}
#include "{{{interfaceName}}}.h"

{{/private_header}}
{{#body}}
#include "{{{interfaceName}}}_private.h"

{{/body}}
{{^repress_stubs}}
{{#private_header}}
{{! TODO: why do we need to include the stubs.h in this .h?!? }}
{{! ...for the function in the checksum, for one thing... }}
#include "{{{interfaceName}}}_stubs.h"

{{/private_header}}
{{! the checksum is used by the interpreter to ensure that the
    Native_Object is still valid; note that this has a global linkage,
    since the support routines need this value }}
{{#inheritance}}
{{#private_header}}
#define {{{interfaceName}}}_checksum {{{inheritance}}}_checksum
{{/private_header}}
{{/inheritance}}
{{^inheritance}}
{{^header}}
{{#private_header}}extern {{/private_header}}{{{Interpreter.checksum_type}}} {{{interfaceName}}}_checksum {{#body}} = { {{{interfaceName}}}_Native_Object_deallocator }{{/body}};
{{/header}}

{{/inheritance}}
{{^private_header}}
void {{{interfaceName}}}_Native_Object_set({{{interfaceName}}} this,
				      {{{interfaceName}}}_Native_Object *new_value){{#header}};{{/header}}
{{#body}}
{
    Native_Object_set(this, new_value, &{{{interfaceName}}}_checksum);
}; /* {{{interfaceName}}}_Native_Object_set */

{{/body}}
{{{interfaceName}}}_Native_Object *{{{interfaceName}}}_Native_Object_get({{{interfaceName}}} this,
				      {{{Interpreter.error_type}}} *error_check){{#header}};{{/header}}
{{#body}}
{
    return Native_Object_get(this, &{{{interfaceName}}}_checksum, error_check);
}; /* {{{interfaceName}}}_Native_Object_get */
{{/body}}

{{/private_header}}
{{^private_header}}
/* all WebIDL constructs have a constructor function, so that C code
   can build any of these constructs */
{{{interfaceName}}} {{{interfaceName}}}_constructor(void){{#header}};{{/header}}
{{#body}}
{
    {{{interfaceName}}} new_{{{interfaceName}}} = create_empty_{{{interfaceName}}}();

    {{#attributes}}
    {{! the "get_default_value" function takes the string and either
    	returns the default value for the C_Type if its an intrinsic
        type or "<C_Type>_constructor()" (for WebIDL constructs) }}
    {{#C_and_Jerryscript_Types}}
    set_{{{interfaceName}}}_{{{attributeName}}}(new_{{{interfaceName}}}, {{{default_value}}});
    {{/C_and_Jerryscript_Types}}
    {{/attributes}}

    /* set up the native object */
    Native_Object_set(new_{{{interfaceName}}}, (struct {{{interfaceName}}}_Native_Object *){{{interfaceName}}}_Native_Object_create(), &{{{interfaceName}}}_checksum);

    return new_{{{interfaceName}}};
} /* {{{interfaceName}}}_constructor */
{{/body}}

{{/private_header}}
{{/repress_stubs}}
{{#hasAttributes}}
{{^private_header}}

{{#attributes.length}}
/* attribute GETTERS/SETTERS */
{{/attributes.length}}
{{#attributes}}
{{#C_and_Jerryscript_Types}}
{{#header}}extern {{/header}}{{{C_Type}}} get_{{{interfaceName}}}_{{{attributeName}}} ({{{interfaceName}}} this){{#header}};{{/header}}
{{#body}}
{
    {{{Interpreter.Type}}} property_pointer = jerry_create_string((const jerry_char_t *) "{{{attributeName}}}");
    {{{Interpreter.Type}}} attribute_pointer = jerry_get_property(this, property_pointer);
    {{{C_Type}}} return_value = ({{{C_Type}}}){{{Interpreter.interpreter}}}_get_{{{C_Type}}}_value(attribute_pointer);
    jerry_release_value(property_pointer);
    jerry_release_value(attribute_pointer);
    return return_value;
} /* get_{{interfaceName}}_{{attributeName}} */

{{/body}}
{{#header}}extern {{/header}}void set_{{{interfaceName}}}_{{{attributeName}}} ({{{interfaceName}}} this, {{{C_Type}}} new_value){{#header}};{{/header}}
{{#body}}
{
    {{{Interpreter.Type}}} new_value_pointer =
              {{{Interpreter.interpreter}}}_{{#is_object}}_{{/is_object}}create_{{{C_Type}}}({{#is_string}}(const jerry_char_t *) {{/is_string}}new_value);
    {{{Interpreter.interpreter}}}__set_property(this, "{{{attributeName}}}", new_value_pointer);
    jerry_release_value(new_value_pointer);

} /* set_{{interfaceName}}_{{attributeName}} */

{{/body}}
{{/C_and_Jerryscript_Types}}
{{/attributes}} {{! ATTRIBUTE GETTERS/SETTERS}}
{{/private_header}}

{{/hasAttributes}}
{{^private_header}}
/* this variable is used in composite types to denote a field of type
    {{{interfaceName}}} -- this should be considered a read-only value */
{{#header}}extern {{/header}}int {{{interfaceName}}}_uid;

{{/private_header}}
{{^header}}
{{#repress_stubs}}
/* each Javascript object can have a single C object associated with
   it, which we call a Native_Object ("native" to the C code); these
   Native_Objects are attached to their objects by Jerryscript, and
   Jerryscript also keeps track of when the associated object is
   destroyed -- when a Javascript object is destroyed, Jerryscript
   will call a user function to deallocate the associated Native_Object;
   thus, when we assign a Native_Object to a Javascript object using
   Native_Object_set, we also give it a deallocator for that
   Native_Object (note that the function can be null if there isn't
   any memory to free) */
void {{{interfaceName}}}_Native_Object_deallocator({{{interfaceName}}}_Native_Object *native_object){{#private_header}};{{/private_header}}
{{#body}}
{
	/* USER CODE GOES HERE */
} /* {{{interfaceName}}}_Native_Object_deallocator */

{{/body}}
{{{interfaceName}}}_Native_Object *{{{interfaceName}}}_Native_Object_create(void){{#private_header}};{{/private_header}}
{{#body}}
{
    {{{interfaceName}}}_Native_Object *new_object = ({{{interfaceName}}}_Native_Object *)malloc(sizeof({{{interfaceName}}}_Native_Object));

	/* USER CODE GOES HERE */ 
    return new_object;
} /* {{{interfaceName}}}_Native_Object_create */
{{/body}}
{{/repress_stubs}}

{{#body}}
/* put all of the native-code functions (indentifable by the
 *  suffix "_handler") here: */

{{/body}}
{{#operations}}
    {{^inherited_operation}}
{{{Interpreter.Type}}}
{{{interfaceName}}}_{{{operationName}}}_handler(const {{{Interpreter.Type}}} func_value, /**< function object */
		   const {{{Interpreter.Type}}} this_val, /**< this arg */
                   const {{{Interpreter.Type}}} *args_p, /**< function arguments */
                   const jerry_length_t args_cnt){{#private_header}};{{/private_header}} /**< number of function arguments */
{{#body}}
{
    {{{Interpreter.error_type}}} error = 0;
    {{#is_constructor}}
    {{{Interpreter.Type}}} new_interface = create_empty_{{{interfaceName}}}();
    {{/is_constructor}}
{{> demarshal_args}}

{{#repress_stubs}}
    {{{interfaceName}}}_Native_Object *native_object;
    GET_NATIVE_OBJECT_OR_RETURN_ON_ERROR(this_val, native_object, &{{{interfaceName}}}_checksum);

    /* USER CODE GOES HERE */

{{/repress_stubs}}
{{^repress_stubs}}
{{#C_and_Jerryscript_Types}}
    extern {{#return_is_this}}{{{Interpreter.Type}}}{{/return_is_this}}{{^return_is_this}}{{{C_Type}}}{{/return_is_this}} {{{interfaceName}}}_{{{operationName}}}({{{Interpreter.Type}}}{{#arguments.length}}, {{/arguments.length}}{{#arguments}}{{#C_and_Jerryscript_Types}}{{{C_Type}}}{{/C_and_Jerryscript_Types}}{{^finalParam}}, {{/finalParam}}{{/arguments}}, {{{Interpreter.error_type}}} *error);
{{/C_and_Jerryscript_Types}}
{{/repress_stubs}}
{{! for the "return_value", the logic is as follows: 1) don't put out
the declaration if it's a void return type or this function returns
the this pointer; 2) if we're repressing stubs, then put it out as a
simple declaration; 3) if we're not repressing stubs, then put out the
declaration with an assignment from the stub }}
{{#repress_stubs}}{{^voidReturnType}}
/* THIS VARIABLE SHOULD HOLD THE VALUE TO BE RETURNED */{{/voidReturnType}}{{/repress_stubs}}
{{#C_and_Jerryscript_Types}}
    {{^voidReturnType}}{{^return_is_this}}{{{C_Type}}} return_value{{#repress_stubs}};{{/repress_stubs}}{{^repress_stubs}} ={{/repress_stubs}}{{/return_is_this}}{{/voidReturnType}}{{^repress_stubs}} {{{interfaceName}}}_{{{operationName}}}({{#is_constructor}}new_interface{{/is_constructor}}{{^is_constructor}}this_val{{/is_constructor}}{{#arguments.length}}, {{/arguments.length}}{{#arguments}}{{{name}}}{{^finalParam}}, {{/finalParam}}{{/arguments}}, &error);{{/repress_stubs}}
{{/C_and_Jerryscript_Types}}

    /* we expect the stubs files to return a non-zero error if
       something went wrong */
{{> clean_up_and_return}}

} /* {{{interfaceName}}}_{{{operationName}}}_handler */

{{/body}}
    {{/inherited_operation}}
{{/operations}}

{{#body}}
static {{{Interpreter.Type}}}
create_{{{interfaceName}}}_interface_handler(const {{{Interpreter.Type}}} func_value,
		   const {{{Interpreter.Type}}} this_val,
                   const {{{Interpreter.Type}}} *args_p,
                   const jerry_length_t args_cnt)
{
{{! If the object has been specified as no-interface, then the user's
    not allowed to create a new one of these; for now, return the
    (single) global object instead of an error }}
{{#NoInterfaceObject}}
    {{{Interpreter.Type}}} object_name = jerry_create_string((const jerry_char_t *) "{{{interfaceName}}}");
    {{{Interpreter.Type}}} global_object = jerry_get_global_object();
    /* THIS IS A nointerfaceobject, SO WE'RE RETURNING THE (SINGLE) GLOBAL
       INSTANCE */
    {{{Interpreter.Type}}} object = jerry_get_property(global_object, object_name);
    jerry_release_value(object_name);
    jerry_release_value(global_object);
    return object;
{{/NoInterfaceObject}}
{{^NoInterfaceObject}}
    {{{Interpreter.Type}}} new_{{{interfaceName}}} = create_empty_{{{interfaceName}}}();

  {{#constructors.length}}
  {{{Interpreter.Type}}} return_value;

  {{/constructors.length}}
  {{#sorted_constructors}}
{{! the logic: if "no_final_check_necessary", the check that _would_
    have been put out would be "if (args_cnt >= 0", which is always
    true, b/c args_cnt is unsigned; so instead of a check, we'll just
    put "else" (unless there are no preceding "if (args_cnt >= ??)"
    checks) and no error reporting, since we'll always match }}
  {{#no_final_check_necessary}}{{^first_in_list}}else{{/first_in_list}}{{/no_final_check_necessary}}{{^no_final_check_necessary}}{{^first_in_list}}else {{/first_in_list}}if (args_cnt {{#greater_than}}>={{/greater_than}}{{^greater_than}}=={{/greater_than}} {{{parameter_count}}}){{/no_final_check_necessary}}
  {
      {{#constructors_at_this_level}}
      return_value = {{{interfaceName}}}_{{{operationName}}}_handler(func_value,
                                                new_{{{interfaceName}}},
						args_p,
						args_cnt);
      if (!jerry_value_is_error(return_value))
          goto return_new_interface;
      else
          {{^last_constructor_in_list}}
          jerry_release_value(return_value);
          {{/last_constructor_in_list}}
          {{#last_constructor_in_list}}
	  {
	      jerry_release_value(new_{{{interfaceName}}});
              new_{{{interfaceName}}} = return_value;
          }
          {{/last_constructor_in_list}}
      {{/constructors_at_this_level}}
  }
  {{#last_in_list}}
  {{^no_final_check_necessary}}
  else
  {
      new_{{{interfaceName}}} = {{{Interpreter.interpreter}}}_create_error(JERRY_ERROR_TYPE,
         (const jerry_char_t *) "No constructor found for those parameters.\n");
      goto return_new_interface;
  }
  {{/no_final_check_necessary}}
  {{/last_in_list}}
  {{/sorted_constructors}}
  {{^constructors.length}}
    {{#attributes}}
    if ((((signed int)args_cnt)-1) >= {{{attribute_index}}})
    {
        {{{Interpreter.Type}}} {{{attributeName}}}_prop_name = jerry_create_string ((const jerry_char_t *) "{{{attributeName}}}");
        jerry_release_value(jerry_set_property(new_{{{interfaceName}}}, {{{attributeName}}}_prop_name, args_p[{{{attribute_index}}}]));
        jerry_release_value({{{attributeName}}}_prop_name);
    }

    {{/attributes}}
  {{/constructors.length}}
return_new_interface:
    return new_{{{interfaceName}}};
{{/NoInterfaceObject}}
} /* create_{{{interfaceName}}}_interface_handler */

{{/body}}
/* we need this when we want to create a structure with the
   interface's operations, but we don't (yet?) have any values for the
   attributes */
{{{Interpreter.Type}}} create_empty_{{{interfaceName}}}(){{#private_header}};{{/private_header}}
{{#body}}
{
    {{{Interpreter.Type}}} new_{{{interfaceName}}} = jerry_create_object();

  {{#attributes}}
    {
    {{#C_and_Jerryscript_Types}}
        {{{Interpreter.Type}}} {{{attributeName}}}_prop_name = jerry_create_string ((const jerry_char_t *) "{{{attributeName}}}");
	{{{Interpreter.Type}}} {{{attributeName}}}_default_value = {{{Interpreter.interpreter}}}_{{#is_object}}_{{/is_object}}create_{{{Jerryscript_Type}}}({{#is_string}}(const jerry_char_t *) {{/is_string}}{{{default_value}}});
        jerry_release_value(jerry_set_property(new_{{{interfaceName}}}, {{{attributeName}}}_prop_name, {{{attributeName}}}_default_value));
        jerry_release_value({{{attributeName}}}_default_value);
        jerry_release_value({{{attributeName}}}_prop_name);
    {{/C_and_Jerryscript_Types}}
    }
  {{/attributes}}

    {{! Note that we pushed the parents into the array as if it were a
     	stack, so that children override parent methods (b/c they come
	later when we walk through the array, and jerry_set_prototype
	overwrites the old with the new) }}
    {{! TODO: check to see if an actual prototype is returned from the
        following call: }}
    {{#prototype_chain}}
    {{{Interpreter.Type}}} prototype_{{{parentName}}} = get_prototype((char *)"{{{parentName}}}");
    jerry_release_value(jerry_set_prototype(new_{{{interfaceName}}},
					    prototype_{{{parentName}}}));
    jerry_release_value(prototype_{{{parentName}}});
    {{/prototype_chain}}

    {{! ...and, of course, we overlay the current object's prototype
        last so that its methods override all of its ancestors }}
    {{{Interpreter.Type}}} prototype = get_prototype((char *)"{{{interfaceName}}}");
    jerry_release_value(jerry_set_prototype(new_{{{interfaceName}}},
					    prototype));
    jerry_release_value(prototype);

    /* set up the Native_Object for the new object */
    {{{interfaceName}}}_Native_Object *native_object = {{{interfaceName}}}_Native_Object_create();
    Native_Object_set(new_{{{interfaceName}}}, native_object, &{{{interfaceName}}}_checksum);

    return new_{{{interfaceName}}};
} /* create_empty_{{{interfaceName}}} */
{{/body}}

void initialize_{{{interfaceName}}}_(void){{#private_header}};{{/private_header}}
{{#body}}
{
    /* first, make sure that this prototype doesn't already exist */
    {{{Interpreter.Type}}} existing_prototype = get_prototype((char *)"{{{interfaceName}}}");
    if (!jerry_value_is_error(existing_prototype) &&
        !jerry_value_is_undefined(existing_prototype))
    {
        jerry_release_value(existing_prototype);
	return;
    }

    /* create the prototype object */
    {{! for attributes: attributes cannot get a default value, which
       means that they don't need to be created now; Javascript
       automagically creates them when they're first defined, so we
       don't need to do anything -- we probably don't need to do
       anything in the object version of the interface, either, but it
       looks nice... }}
    {{! IS THE ABOVE STILL TRUE?  WHAT IF IT'S A NOINTERFACEOBJECT? }}
    {{{Interpreter.Type}}} global_object = jerry_get_global_object();

    /* create a new object to hold all of the interface prototypes */
    {{{Interpreter.Type}}} {{{interfaceName}}}_prototype_object = jerry_create_object();
    {{#operations}}
        {{^is_constructor}}
    add_field_to_object({{{interfaceName}}}_prototype_object,
                        "{{{operationName}}}", &{{#inherited_operation}}{{{defining_interface}}}{{/inherited_operation}}{{^inherited_operation}}{{{interfaceName}}}{{/inherited_operation}}_{{{operationName}}}_handler);
	{{/is_constructor}}
    {{/operations}}

{{! if it's specified as a NoInterfaceObject, then the object goes
    into the global namespace; otherwise, the object is used as a
    prototype, so record it in the global prototypes holder }}
{{#NoInterfaceObject}}
    /* set up the Native_Object for the new object */
    {{{interfaceName}}}_Native_Object *native_object = {{{interfaceName}}}_Native_Object_create();
    Native_Object_set({{{interfaceName}}}_prototype_object, native_object, &{{{interfaceName}}}_checksum);

    {{{Interpreter.Type}}} object_name = jerry_create_string((const jerry_char_t *) "{{{interfaceName}}}");
    jerry_release_value(jerry_set_property(global_object,
					   object_name,
					   {{{interfaceName}}}_prototype_object));
{{/NoInterfaceObject}}
{{^NoInterfaceObject}}
    register_prototype((char *)"{{{interfaceName}}}", {{{interfaceName}}}_prototype_object);
{{/NoInterfaceObject}}
    jerry_release_value({{{interfaceName}}}_prototype_object);

{{^NoInterfaceObject}}
{{! this sets up the ability to "new" the object, if it's not been specified
    as NoInterface or ReturnFromRequire }}
{{^is_module}}
    add_field_to_object(global_object, "{{{interfaceName}}}",
                        &create_{{{interfaceName}}}_interface_handler);

{{/is_module}}
{{/NoInterfaceObject}}
    jerry_release_value(global_object);

    /* finally, make sure that all of the types upon which this type
       depends have been loaded; note that if there's a cycle,
       initializing all of the included data structures after we
       create this one should(?) keep us from running infinitely */
{{#externalTypes}}
    initialize_{{{type}}}_();
{{/externalTypes}}
{{#non_intrinsic_types}}
  {{! typedef'd types don't need an initialization if their ultimate
      type is a primitive type (since those don't have initializors) }}
  {{#needs_initialization}}
    initialize_{{{type_name}}}_();
  {{/needs_initialization}}
{{/non_intrinsic_types}}
{{#prototype_chain}}
    initialize_{{{parentName}}}_();
{{/prototype_chain}}

} /* initialize_{{{interfaceName}}}_ */
{{/body}}

{{! if it's a type returned by a module, then the procedure is
    (mostly) the same as when we're setting up the template object:
    the difference is that for regular interfaces, we create the
    prototype object of methods and store it under the global object,
    whereas for module objects, we call a stub to create the object
    and then just graft the methods onto it and return it }}
{{#is_module}}
{{#body}}
static {{{Interpreter.Type}}} {{{interfaceName}}}_require_function_(void)
{
    /* make sure that all of the types upon which this type depends
       have been initialized */
{{#externalTypes}}
    initialize_{{{type}}}_();
{{/externalTypes}}
{{#non_intrinsic_types}}
  {{! typedef'd types don't need an initialization if their ultimate
      type is a primitive type (since those don't have initializors) }}
  {{#needs_initialization}}
    initialize_{{{type_name}}}_();
  {{/needs_initialization}}
{{/non_intrinsic_types}}
{{! TODO: handle repress_stubs }}

    /* let the user set up the object and then map the operations onto it */
    {{{Interpreter.Type}}} new_{{{interfaceName}}} =
                     {{{Interpreter.interpreter}}}_create_{{{interfaceName}}}(require_{{{interfaceName}}}());

    {{{Interpreter.Type}}} prototype = get_prototype((char *)"{{{interfaceName}}}");
    jerry_release_value(jerry_set_prototype(new_{{{interfaceName}}},
					    prototype));
    jerry_release_value(prototype);
   
    return new_{{{interfaceName}}};
} /* {{{interfaceName}}}_require_function_ */
{{/body}}
{{/is_module}}

{{#body}}
/* we need to register the initialize_{{{interfaceName}}}_ function so
   that it gets run automatically... */
__attribute__((constructor))
static void register_initialize_{{{interfaceName}}}(void)
{
    /* ...supplied by webidl_utilities */
    {{{interfaceName}}}_uid = get_type_uid();

    /* ...supplied by webidl_utilities... */
    register_initialization_function(initialize_{{{interfaceName}}}_);

{{#is_module}}
    /* ...supplied by webidl_utilities... */
    register_require_function("{{{interfaceName}}}",
                              {{{interfaceName}}}_require_function_);

{{/is_module}}
} /* register_initialize_{{{interfaceName}}} */

{{/body}}
{{! INTERFACE GETTER/SETTER: }}
{{{interfaceName}}} {{{Interpreter.interpreter}}}_get_{{{interfaceName}}}_value({{{Interpreter.Type}}} value){{#private_header}};{{/private_header}}
{{#body}}
{
    /* interfaces live on the Javascript side, so "value" is already
        of the correct type */
    return value;

} /* {{{Interpreter.interpreter}}}_get_{{{interfaceName}}}_value */

{{/body}}
{{^original_arg_handling}}

{{#private_header}}
#define {{{Interpreter.interpreter}}}_arg_{{{interfaceName}}}(x, z) \
            jerryx_arg_custom(x, \
                             (uintptr_t)&((uintptr_t []){(uintptr_t)JERRYX_ARG_COERCE, \
                                                         (uintptr_t)z}), \
                              {{{Interpreter.interpreter}}}_arg_to_{{{interfaceName}}})

{{/private_header}}
{{{Interpreter.Type}}}
{{{Interpreter.interpreter}}}_arg_to_{{{interfaceName}}}(jerryx_arg_js_iterator_t *js_arg_iter_p,
                                       const jerryx_arg_t *c_arg_p){{#private_header}};{{/private_header}}
{{#body}}
{
    {{{Interpreter.Type}}} interface_value = jerryx_arg_js_iterator_pop(js_arg_iter_p);

    if (!jerry_value_is_error(interface_value))
    {
        if ({{{Interpreter.interpreter}}}_value_is_{{{interfaceName}}}(interface_value))
            (*({{{interfaceName}}}*)(c_arg_p->dest)) = interface_value;
    	else
	    interface_value = jerry_create_error (JERRY_ERROR_TYPE,
                      (const jerry_char_t *) "Expected a {{{interfaceName}}}.");
    }

    return interface_value;
} /* {{{Interpreter.interpreter}}}_arg_to_{{{interfaceName}}} */
{{/body}}

{{/original_arg_handling}}
/* like all the {{{Interpreter.interpreter}}}_create_* functions, this one takes a C
   variable and creates its Jerryscript/Javascript equivalent */
{{{Interpreter.Type}}} {{{Interpreter.interpreter}}}_create_{{{interfaceName}}}({{{interfaceName}}} x){{#private_header}};{{/private_header}}
{{#body}}
{
    /* interfaces are stored over on the Javascript side, so "x" is
       already the correct type; we need to create a new version of
       the handle so that the user can "release" his */
    return jerry_acquire_value(x);

} /* {{{Interpreter.interpreter}}}_create_{{{interfaceName}}} */

{{/body}}
{{#AAAprivate_header}}
{{#AAAtypedefs}}
#define {{{Interpreter.interpreter}}}_create_{{{name}}} {{{Interpreter.interpreter}}}_create_{{{type}}}
{{/AAAtypedefs}}
{{/AAAprivate_header}}
bool {{{Interpreter.interpreter}}}_value_is_{{{interfaceName}}}({{{Interpreter.Type}}} thing_value){{#private_header}};{{/private_header}}
{{#body}}
{
    {{#attributes}}
    if (!{{{Interpreter.interpreter}}}__has_own_property(thing_value, "{{{attributeName}}}"))
            return false;
    else
    {
{{#C_and_Jerryscript_Types}}
        {{{Interpreter.Type}}} field = {{{Interpreter.interpreter}}}__get_property(thing_value,
                                                         "{{{attributeName}}}");
	bool value_is_right_type = {{{Interpreter.interpreter}}}_{{#is_object}}_{{/is_object}}value_is_{{{C_Type}}}(field);
        jerry_release_value(field);

        if (!value_is_right_type)
            return false;
{{/C_and_Jerryscript_Types}}
    }

    {{/attributes}}
    {{#operations.length}}
    /* the best we can do for operations is test if: a) they exist,
       and b) they have the right number of parameters */

    {{/operations.length}}
    {{#operations}}
    {{^is_constructor}}
    if (!webidl_utilities_has_operation(thing_value, "{{{operationName}}}", {{{arguments.length}}}))
        return false;
    {{/is_constructor}}
    {{/operations}}
    /* fall-through indicates success */
    return true;
} /* {{{Interpreter.interpreter}}}_value_is_{{{interfaceName}}} */

{{/body}}
{{/header}}
{{^private_header}}
{{#debug_printing}}
void debug_print_{{{interfaceName}}} (char *variable_name,
     				      {{{interfaceName}}} value,
				      unsigned int indentation){{#header}};{{/header}}
{{#body}}
{
    /* we can get into infinite recursion, with one structure printing
       a second, which prints the first, and so on -- a simple
       mechnism would be to return whenever the indentation (which
       tracks recursion depth) gets too big */
   if (indentation > DEBUG_RECURSION_DEPTH_TOO_BIG)
   {
       printf("%*s%s -- RECURSION HALTED\n", indentation, "", variable_name);
       return;
   }

   printf("%*s%s:\n", indentation, "", variable_name);
{{^attributes.length}}
   printf("%*sNO ATTRIBUTES TO PRINT\n", indentation+DEBUG_INDENTATION_WIDTH, "");
{{/attributes.length}}
{{#attributes}}
        debug_print_{{{C_and_Jerryscript_Types.C_Type}}}("{{{attributeName}}}",
				 get_{{{interfaceName}}}_{{{attributeName}}}(value),
	                         indentation+DEBUG_INDENTATION_WIDTH);
{{/attributes}}

} /* debug_print_{{{interfaceName}}} */
{{/body}}
{{/debug_printing}}
{{/private_header}}
{{^body}}
#endif /* {{#private_header}}PRIVATE_{{/private_header}}{{{interfaceName}}}_H_ */
{{/body}}
{{/interfaces}}
{{/OBEYFORMATTING}}
