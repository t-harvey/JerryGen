/* AUTOMATICALLY GENERATED ON {{timestamp}} */

// user
{{#hasDictTypes}}
#include "PPRPCGEN_{{{moduleName}}}Types.h"
{{/hasDictTypes}}

{{#interfaces}}
#include "PPRPCGEN_{{{name}}}.h"
{{/interfaces}}

//ppapi
#include <ppapi/cpp/instance.h>
#include "ppapi/cpp/var.h"
#include "ppapi/cpp/var_array.h"
#include "ppapi/cpp/var_dictionary.h"

//pprpc
#include "nativecalls/RPCTransport.h"
#include "nativecalls/JSONRPC.h"
#include "nativecalls/RPCRuntime.h"
#include "nativecalls/RPCType.h"

using namespace pprpc;
using namespace pprpcgen;

//std
#include <stdio.h>


// we define types here, and marshalling/demarshalling methods of each type.
{{#dictionaries}}
DEFINE_TYPE_CLASS({{{name}}}Type, {{{name}}});
{{/dictionaries}}

{{#dictionaries}}
pp::Var {{{name}}}Type::AsVar(const ValidType<{{{name}}}>& v){
	{{{name}}} value = v.getValue();
	pp::VarDictionary r;
	{{#members}}
	/* member: {{{name}}} */
	{{^typeIsSequence}}
	r.Set("{{{name}}}", {{TypeWrapperName}}Type(value.{{{name}}}).AsVar());
	{{/typeIsSequence}}
	{{#typeIsSequence}}
	r.Set("{{{name}}}", {{TypeWrapperName}}Type::AsVarArray(value.{{{name}}}));
	{{/typeIsSequence}}

	{{/members}}
	return r;
}

ValidType<{{{name}}}> {{{name}}}Type::Extract(const pp::Var& v){
	ValidType<{{{name}}}> invalid;
	if(v.is_dictionary()){
		pp::VarDictionary vDict(v);
		{{{name}}} r;

		{{#members}}
		/* member: {{{name}}} */
		if(!vDict.HasKey("{{{name}}}")) return invalid;
		const ValidType< {{{STDTypeString}}} >& {{name}}Part = {{TypeWrapperName}}Type::Extract{{#typeIsSequence}}Vector{{/typeIsSequence}}(vDict.Get("{{{name}}}"));
		if(!{{{name}}}Part.isValid()) return invalid;
		r.{{{name}}} = {{{name}}}Part.getValue();

		{{/members}}

		return ValidType<{{{name}}}>(r);
	}
	return ValidType<{{{name}}}>();
}

{{/dictionaries}}

// we define functors.
// functors are how we plug in our own code to the library.
// parameter marshaling happens here too.

{{#interfaces}}
/* interface {{{name}}} */
{{#operations}}
/* operation {{{name}}} */
class ServerStub_{{interfaceName}}_{{{name}}} : public RPCServerStub{
public:
	virtual pp::Var call(const pp::VarArray* params, RPCError& error){
		if(params->GetLength() == {{numParams}}){
			{{#arguments}}
			ValidType < {{{STDTypeString}}} > param_{{{name}}} = {{TypeWrapperName}}Type::Extract{{#typeIsSequence}}Vector{{/typeIsSequence}}(params->Get({{paramIndex}}));
			if(!param_{{name}}.isValid()){
				error.init(-32602, "Invalid Params: Param {{paramIndex}} ({{name}}) has incorrect type. Expected {{{STDTypeString}}}", "");
				return pp::Var();
			}
			{{/arguments}}

			return {{TypeWrapperName}}Type::AsVar{{#typeIsSequence}}Array{{/typeIsSequence}}(pprpcgen::{{interfaceName}}::{{name}}(
				{{#arguments}}
				param_{{name}}.Extract().getValue(){{^finalParam}},{{/finalParam}}
				{{/arguments}}{{{ThrowsRPCErrorParamString}}}
			));
		} else {
			error.init(-32602, "Invalid Params: Incorrect number of arguments.", "");
		}
		return pp::Var();
	}
};
{{/operations}}

{{/interfaces}}


#include <ppapi/cpp/module.h>

class {{moduleName}}Module: public pp::Module {
public:
	{{moduleName}}Module() : pp::Module() {}
	virtual ~{{moduleName}}Module() {
		fprintf(stdout, "\n~{{moduleName}}Module\n");
	}
	virtual pp::Instance* CreateInstance(PP_Instance instance) {
		// set up
		pprpc::RPCTransport* rpcTransport = new RPCTransport(instance);
		pprpc::JSONRPC* jsonRPC = new pprpc::JSONRPC(rpcTransport);
		pprpc::RPCRuntime* rpcRuntime = new pprpc::RPCRuntime(jsonRPC);

		// add methods
		{{#interfaces}}
		{{#operations}}
		rpcRuntime->AddFunctor("{{interfaceName}}::{{name}}", new ServerStub_{{interfaceName}}_{{name}});
		{{/operations}}
		{{/interfaces}}
		return rpcTransport;
	}
};

namespace pp {
	Module* CreateModule() {
	  return new {{moduleName}}Module();
	}
}
