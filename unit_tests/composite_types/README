This test is designed to test the infrastructure used to build
composite types.  It includes not only building composite types of
combinations of all four WebIDL constructs, but differentiating
between them, so there are many variations that we have to test.

The .idl file defines a couple of types of each WebIDL construct with
minor differences, and the main.c file contains many tests against the
types, both from the Javascript side and the C/API side.

To generate C code:

GENERATOR/generate.js --output_utility_files --debug_printing --package=composite_test GENERATOR/unit_tests/composite_types/composite_types.idl

To compile into Jerryscript (from the
Jerryscript/examples/composite_test directory):

gcc -g --std=c99 -I. -I../../jerry-port/default/include/ -I../../jerry-core/include -I../../jerry-ext/include -I../buffer -I../../jerry-main GENERATOR/unit_tests/composite_types/composite_test_main.c ../buffer/*.c *.c ../../build/lib/libjerry-core.a ../../build/lib/libjerry-ext.a ../../build/lib/libjerry-port-default.a -lm


Expected Results:

We want to make sure that analogous composites get defined by the same
.c/.h combination -- the following WebIDL:

enum Duplicate_type1 { "doesnt_matter1", "really_doesnt_matter1" };
enum Duplicate_type2 { "doesnt_matter2", "really_doesnt_matter2" };
enum Duplicate_type3 { "doesnt_matter3", "really_doesnt_matter3" };
dictionary combo {
    (Duplicate_type1 or Duplicate_type2 or Duplicate_type3) one_two_three;
    (Duplicate_type2 or Duplicate_type3 or Duplicate_type1) two_three_one;
    (Duplicate_type3 or Duplicate_type1 or Duplicate_type2) three_one_two;
}; /* combo */

...should produce only one .c/.h file for all three composites -- and it
should be called
Duplicate_type1_or_Duplicate_type2_or_Duplicate_type3.[ch], because we
alphabetize the types to build canonical names.


The output should be:


enum1 is of type Enum1:                 TRUE
        enum1 is of type Enum2:           FALSE
enum2 is of type Enum1:                 FALSE
        enum2 is of type Enum2:           TRUE
not_either_enum is of type Enum1:       FALSE
        not_either_enum is of type Enum2: FALSE

callback1 is of type Enum1:     FALSE
enum1 is of type Callback1:     FALSE

callback1 is of type Callback1:         TRUE
        callback1 is of type Callback2: TRUE
        callback1 is of type Callback3: FALSE
callback2 is of type Callback1:         TRUE
        callback2 is of type Callback2: TRUE
        callback2 is of type Callback3: FALSE
callback3 is of type Callback1:         FALSE
        callback3 is of type Callback2: FALSE
        callback3 is of type Callback3: TRUE

dict1 is of type Dictionary1:                   TRUE
        dict1 is of type Dictionary2:           FALSE
dict2 is of type Dictionary1:                   FALSE
        dict2 is of type Dictionary2:           FALSE
dict12_from_scratch is of type Dictionary1:     FALSE
dict12_from_scratch is of type Dictionary2:     FALSE

interface1 is of type Interface1:               TRUE
        interface1 is of type Interface2:       FALSE
        interface1 is of type Interface3:       FALSE
interface2 is of type Interface1:               FALSE
        interface2 is of type Interface2:       TRUE
        interface2 is of type Interface3:       FALSE
interface3 is of type Interface1:               TRUE
        interface3 is of type Interface2:       TRUE
        interface3 is of type Interface3:       TRUE
interface12 is of type Interface1:              TRUE
        interface12 is of type Interface2:      TRUE
        interface12 is of type Interface3:      TRUE
**************** COMPOSITE TYPES ********************
FIRST! CALL (with '1' and 'bob' as parameters) :
PARAMETERS TO "interface4_function1" :
   l_or_i1 with union type >long<:
       :  1
   l_or_f_or_s with union type >string<:
       :  "bob"
SECOND CALL (with interface1(-1, -2.0) and 1.0 as parameters) :
PARAMETERS TO "interface4_function1" :
   l_or_i1 with union type >Interface1<:
      :
         long_attribute :  -1
         float_attribute :  -2.000000
   l_or_f_or_s with union type >float<:
       :  1.000000
Explicitly Nested: 1.0
PARAMETERS TO "show_explicitly_nested" :
   explicitly_nested_arg with union type >float<:
       :  1.000000
Explicitly Nested: 'bob'
PARAMETERS TO "show_explicitly_nested" :
   explicitly_nested_arg with union type >string<:
       :  "bob"
Explicitly Nested: 2
PARAMETERS TO "show_explicitly_nested" :
   explicitly_nested_arg with union type >float<:
       :  2.000000
Explicitly Nested: true
PARAMETERS TO "show_explicitly_nested" :
   explicitly_nested_arg with union type >float<:
       :  1.000000
PARAMETERS TO "show_nested_dictionaries" :
   implicitly_nested_arg with union type >composite_of_composites<:
      :
         composite_of_composites_field with union type >single_composite1<:
            :
               single_composite_field with union type >float<:
                   :  1.000000
PARAMETERS TO "show_nested_dictionaries" :
   implicitly_nested_arg with union type >long<:
       :  1
PARAMETERS TO "foo" :
   intrinsic_arg with union type >double<:
       :  1.000000
PARAMETERS TO "foo" :
   intrinsic_arg with union type >string<:
       :  "bob"
PARAMETERS TO "foo" :
   intrinsic_arg with union type >double<:
       :  1.000000
PARAMETERS TO "foo" :
   intrinsic_arg with union type >Enum1<:
      : EnumString1
