var z2 = [ [1, 2, 3], [4, 5, 6] ];
var z3 = [ 7, 8 , 9 ];
var z = new simple_dictionary(true, [ [ 1, 2, 3 ], [ 4, 5, 66 ] ] );
 var x = new simple_interface(5);
print("z2: " + z2);
var a = true;
var b = 2;
var c = 4;
var d = true;
var e = "17.0";
print("***********************executing: x.baz(a(true), b(2), c(2));");
x.baz(a, b, c);
print("***********************executing: x.baz(a(true), b(2), d(true)); <-- should be an error with strict type checking (third param is a bool, not a float)");
x.baz(b, a, d);
print("***********************executing: x.baz(d(true), e(\"17.0\"), e(\"17.0\")); <-- should be an error with strict type checking (2nd and 3rd params are a strings, not a numbers)");
x.baz(d, e, e);
print("***********************executing: x.foo(4.0, z);");
x.foo(4.0, z);
print("***********************executing: x.foo(z, z) <-- should be an error");
x.foo(z, z);
print("***********************executing: x.bar(z3([7, 8, 9]), 'a')");
x.bar(z3, 'a');
print("***********************executing: x.bar('the') <-- should be an error");
x.bar('the');
print("***********************executing: x.bar([4.2], 'a')");
x.bar([4.2], 'a');
print("***********************executing: x.bar([4.2], 'ab') <-- should be an error)");
x.bar([4.2], 'ab');
print("***********************executing: x.bar(\"4\", 'ab') <-- should be an error");
x.bar("4", 'a');
print("***********************changing z.z to 4.32");
z.z = 4.32
print("***********************calling x.foo(4.0, new simple_dictionary( 5, [] )) -- should be an error with strict type checking (new-dict.z is a number, not a boolean)");
x.foo(4.0, new simple_dictionary( 5, [] ) );
print("***********************calling x.foo2(true)");
x.foo2(true);
print("***********************calling x.foo2(1)");
x.foo2(1);
print("***********************calling x.foo2(4.3)");
x.foo2(4.3);
print("***********************calling x.foo4(\"true\")");
x.foo4("true");
print("***********************calling x.foo4(\"the\")");
x.foo4("the");
print("***********************calling x.foo4(true)");
x.foo4(true);
print("***********************calling x.foo4(4.3) <-- w/ strict type checking: should be an error");
x.foo4(4.3);
print("***********************calling x.foo4(undef) <-- w/ strict type checking: should be an error");
var undef = undefined;
x.foo4(undef);
print("***********************calling x.foo2(\"4.3\") <-- w/ strict type checking: should be an error (param needs a float, given a string)");
x.foo2("4.3");
print("***********************calling x.foo5(z) <-- w/ strict type checking: should be an error (z.z is a float, not a boolean)");
x.foo5(z);
print("***********************calling x.foo5(4.3)");
x.foo5(4.3);
print("***********************calling x.foo(1.0, z) <-- w/ strict type checking: should be an error (1st param wants a boolean, given a float);");
x.foo(1.0, z);
print("***********************calling x.foo4(\"\")");
x.foo4("");
print("***********************setting up not_a_simple_dictionary <simple_dictionary-lookalike>)");
var not_a_simple_dictionary = {};
not_a_simple_dictionary.z = true;
not_a_simple_dictionary.array = z2;
not_a_simple_dictionary.bob = 777;
print("***********************calling x.foo(\"t0.0\", not_a_simple_dictionary)");
x.foo("t0.0", not_a_simple_dictionary);
var simple_call = function(x) { print("        simple_call was sent: >" + x + "<");} ;
print("***********************calling x.call_simple_callback(simple_call)");
x.call_simple_callback(simple_call)
